<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="https://zooozoo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zooozoo.github.io/" rel="alternate" type="text/html" /><updated>2018-05-15T08:47:40+09:00</updated><id>https://zooozoo.github.io/</id><title type="html">Record|Organize|Make it mine</title><subtitle>My programming study blog and I hope it help someone who struggling with code</subtitle><author><name>Seok Hun Zoo</name></author><entry><title type="html">기술면접 준비</title><link href="https://zooozoo.github.io/records/2018-03-23-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/" rel="alternate" type="text/html" title="기술면접 준비" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-03-23-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;면접을 위해 따로 공부하는 것 보다는, 열심히 공부한 내용을 바탕으로 면접에서 내 능력을 잘 보여주는 것을 더 선호한다. 면접을 위한 공부가 취업 말고는 무슨 필요가 있겠냐는 생각을 가지고 있다. 그런데 개발자로 이직하기 위해서 면접을 준비하면서 느낀점은 기술면접의 경우 면접준비 자체가 내 실력을 올려가는 데에 도움이 되겠다는 생각을 가질 수 있었다. 단편적으로 ‘A는 B입니다.’라고 답변할 수도 있겠지만 한단계씩 더 깊이 물어보는 질문에 답변할 수 있으려면 기술에 대한 기본적인 지식과 이해가 있어야만 가능하기 때문이다.&lt;/p&gt;

&lt;p&gt;면접 준비를 단순히 면접만 준비하기 위한 것이 아니라, 개발자로서 일하기 위해 알고 있어야할 기본 지식들을 잘 공부할 수 있는 기회로서 면접준비 시간을 가져갈 생각이다. 그렇게 되기를 희망하면서 시작한다!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본적인 질문 리스트에 대한 참고 사이트
 &lt;a href=&quot;http://hahahoho5915.tistory.com/16&quot;&gt;http://hahahoho5915.tistory.com/16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개별 항목 설명에 참고한 책, 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;책 :
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;커니핸 교수의 Hello, Digital World&lt;/code&gt; / 제이펍 출판사&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하루3분 네트워크 교실&lt;/code&gt; / 영진닷컴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overloading과 Overriding에 대한 설명
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://itpangpang.xyz/105&quot;&gt;http://itpangpang.xyz/105&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session, Cookie, Cache
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://genesis8.tistory.com/220&quot;&gt;http://genesis8.tistory.com/220&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/80&quot;&gt;http://jeong-pro.tistory.com/80&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model - View - Controller 패턴
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&quot;&gt;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process와 Thread
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@kd4/3&quot;&gt;https://brunch.co.kr/@kd4/3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Socket
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://jkkang.net/unix/netprg/chap2/net2_1.html&quot;&gt;http://jkkang.net/unix/netprg/chap2/net2_1.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&quot;&gt;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&quot;&gt;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack, Queue, Deque
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wayhome25.github.io/cs/2017/05/28/algorithm/&quot;&gt;https://wayhome25.github.io/cs/2017/05/28/algorithm/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/97&quot;&gt;http://jeong-pro.tistory.com/97&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&quot;&gt;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot;&gt;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IaaS, PaaS, SaaS
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.bloter.net/archives/259518&quot;&gt;http://www.bloter.net/archives/259518&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database Index
    &lt;ul&gt;
      &lt;li&gt;[https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4)](https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;/em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4))&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lalwr.blogspot.kr/2016/02/db-index.html&quot;&gt;https://lalwr.blogspot.kr/2016/02/db-index.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://yagi815.tistory.com/288&quot;&gt;http://yagi815.tistory.com/288&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://parkbosung.tistory.com/11&quot;&gt;http://parkbosung.tistory.com/11&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oop-객체지향-프로그래밍&quot;&gt;OOP (객체지향 프로그래밍)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OOP란 Object-Oriented-Programming의 약어로써 객체지향 프로그래밍을 의미한다.  데이터를 객체로 취급하여 프로그램에 반영한 것이며, 순차적으로 프로그램이 동작하는 기존의 것들(절차지향 프로그래밍 예: C언어)과는 다르게 객체와 객체의 상호작용을 통해 프로그램이 동작하는 것을 말한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;OOP의 특징&lt;/li&gt;
  &lt;li&gt;객체지향 프로그래밍은 코드의 재사용성이 높다.&lt;/li&gt;
  &lt;li&gt;코드의 변경이 용이&lt;/li&gt;
  &lt;li&gt;직관적인 코드분석&lt;/li&gt;
  &lt;li&gt;개발속도 향상&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상속을 통한 장점 극대화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Object
 Object(객체)는 OOP에서 데이터(변수)와 그 데이터에 관련되는 동장(함수), 즉 절차, 방법, 기능을 모두 포함한 개념이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overloading-vs-overriding&quot;&gt;Overloading vs Overriding&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Overloading
    &lt;ul&gt;
      &lt;li&gt;한 클래스 안에서 같은 이름의 메소드를 여러개 정의하는 것&lt;/li&gt;
      &lt;li&gt;매개변수의 타입이 다르거나 개수가 달라야 한다.&lt;/li&gt;
      &lt;li&gt;기본적으로 메소드의 이름이 같기 때문에 매개변수의 타입과 개수가 같다면 오류를 뱉는다. 이름이 같더라도 매개변수의 타입과 개수로 구분된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overriding
    &lt;ul&gt;
      &lt;li&gt;상속에서 나온 개념&lt;/li&gt;
      &lt;li&gt;상위 클래스(부모 클래스)의 메소드를 하위 클래스(자식 클래스)에서 재정의&lt;/li&gt;
      &lt;li&gt;이미 존재하는 클래스를 약간만 변경하여 사용하고자 할 경우 새로 클래스를 만드는 것이 아니라 기존 클래스를 상속받아서 기능을 추가하거나 변경하여 사용하는데 이 때 기존 클래스의 기으을 상속 받는 것을 Overriding이라고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-cookie-cache&quot;&gt;Session, Cookie, Cache&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;HTTP 프로토콜은 무상태(stateless)다. 이는 HTTP 서버가 클라이언트 요청에 대해 아무것도 기억하지 않아도 된다는 것을 뜻하는 약간의 전문 용어다. 서버는 요청된 페이지를 반환한 후 각 데이터 교환의 모든 기록을 폐기해도 된다.&lt;/li&gt;
      &lt;li&gt;세션과 쿠키의 차이점을 크게 보자면, 쿠키는 상태정보를 클라이언트에 저장하는 방식이고, 세션은 상태정보를 웹 서버에 저장하는 방식이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cookie
    &lt;ul&gt;
      &lt;li&gt;1994년에 넷스케이프가 &lt;code class=&quot;highlighter-rouge&quot;&gt;쿠키&lt;/code&gt;라는 해결책을 발명했다.&lt;/li&gt;
      &lt;li&gt;서버가 웹페이지를 브라우저에 보낼 때, 거기에는 브라우저가 저장하기로 되어 있는 부가적인 텍스트 덩어리들(각각 최대 약 4,000바이트)이 포함 될 수 있다. 각 덩어리를 쿠키라고 하다. 브라우저가 차후에 같은 서버에 요청을 보낼 때, 브라우저는 쿠키를 다시 전송한다. 실제로 서버는 클라이언트의 메모리를 사용하여 클라이언트의 이전 방문에 대한 정보를 기억하는 셈이다.&lt;/li&gt;
      &lt;li&gt;각 쿠키에는 이름이 있으며, 단일 서버에 방문할 때마다 여러개의 쿠키가 저장될 수 있다.&lt;/li&gt;
      &lt;li&gt;쿠키느 프로그램이 아니며, 액티브 콘텐츠가 없다. 쿠키는 완전히 수동적이다.&lt;/li&gt;
      &lt;li&gt;쿠키는 저장됐다가 이후에 다시 전송되는 문자열일 뿐이고, 서버에서 비롯하지 않은 어떤 것도 그 서버로 돌아가지 않는다.&lt;/li&gt;
      &lt;li&gt;쿠키는 자신이 유래한 도메인으로만 전송된다.&lt;/li&gt;
      &lt;li&gt;쿠키는 유효기간이 있어서 그 이후에는 브라우저에 의해 삭제된다. 브라우저가 실제로 쿠키를 받아들이거나 반환해야 한다는 요구 사항은 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session
    &lt;ul&gt;
      &lt;li&gt;쿠키는 모든 정보를 브라우저에 저장하기 때문에 보안상의 이슈가 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션은 사용자를 확인 할 수 있는 식별자만 쿠키의 형태로 브라우저에 저장하고, 그와 관련된 데이터는 서버의 데이터베이스에 저장하는 형태다.&lt;/li&gt;
      &lt;li&gt;session-id를 탈취당할 우려가 있기 때문에 보안적인 문제가 여전히 남아있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cache
    &lt;ul&gt;
      &lt;li&gt;Cache란 웹페이지 Resource파일들(오디오, 비디오, 이미지 등)의 임시 저장소로 브라우저에 저장된다.&lt;/li&gt;
      &lt;li&gt;다음에 같은 웹페이지(혹은 웹사이트)로 접속시 이미 리소스 파일들이 브라우저에 저장되어 있기 때문에, 페이지 로딩 속도를 개선해 준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session과 Cookie의 비교
    &lt;ul&gt;
      &lt;li&gt;쿠키는 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아있을 수 있다. 또한 만료기간을 넉넉하게 잡아두면 쿠기삭제를 할 때 까지 유지될 수도 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관 없이 삭제된다.&lt;/li&gt;
      &lt;li&gt;쿠키에 정봑 있기 때문에는 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mvc-패턴&quot;&gt;MVC 패턴&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Model - View - Controller 는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.&lt;/li&gt;
  &lt;li&gt;이 패턴을 성공적으로 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;MVC에서 모델은 애플리케이션의 정보(데이터)를 나타내며, 뷰는 텍스트, 체크박스 항목 등과 같은 사용자의 인터페이스 요소를 나타내고, 컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread와-process&quot;&gt;Thread와 Process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Process
    &lt;ul&gt;
      &lt;li&gt;운영체제에서 실행중인 하나의 프로그램 (하나 이상의 쓰레드를 포함한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thread
    &lt;ul&gt;
      &lt;li&gt;프로세스 내에서 동시에 실행되는 독립적인 실행 단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;프로세스는 운영체제로부터 자원을 할당받는 작업의 단위이고 스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위다. 프로세스는 실행될 때 운영체제로부터 프로세서를 할당받고, 운영되기 위해 필요한 주소 공간, 메모리 등 자원을 할당받는다. 스레드는 한 프로세스 내에서 동작되는 여러 실행의 흐름으로, 프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내에 스레드끼리 공유하면서 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 프로세스(멀티 프로세스)로 할 수 있는 작업을 하나의 프로세스에서 스레드로 나눠서 하는 이유
    &lt;ul&gt;
      &lt;li&gt;결론적으로는 운영체제는 시스템 작업을 효율적으로 관리하기 위한 것이므로 이 목적을 달성하기 위해 스레드를 사용하는 것&lt;/li&gt;
      &lt;li&gt;프로세스로 실행되는 작업을 멀티 스레드로 실행할 경우, 프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있다. 뿐만 아니라 프로세스 간의 통신보다 스레드 간의 통신의 비용이 적으므로 작업들 간의 통신의 부담이 줄어들게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스레드 활용의 단점
    &lt;ul&gt;
      &lt;li&gt;스레드를 활용하면 자원의 효율성이 증가하기도 하지만 스레드 간의 자원 공유는 전역 변수를 이용하므로 동기화 문제에 신경을 써야한다. (각별한 주의 요구됨)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;socket&quot;&gt;Socket&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;소켓은 1982년 BSD(Berkeley Software Distribution) UNIX 4.1에서 처음 소개되었으며 현재 널리 사용되고 있는 것은 BSD UNIX 4.3에서 개정된 것이다.&lt;/li&gt;
  &lt;li&gt;소프트웨어가 서로 연결하려면 소켓 연결이 필요하다. 소켓은 두 시스템 사이의 네트워크 연결을 나타내는 객체다. 우선적으로 소프트웨어가 연결이 되려면 가장 중요한 것은 두 소프트웨어가 상대방과 통신하는 방법, 즉 상대방에게 비트를 보내는 방법을 알고 있어야만 한다. 소켓 연결은 두 시스템 간의 정보를 연결한다는 것을 의미한다. 그 정보에는 네트워크 주소(IP주소)와 포트번호도 포함되어 있고 이것들을 통해서 소켓을 개설할 수 있다.&lt;/li&gt;
  &lt;li&gt;소켓은 소프트웨어로 작성된 통신 접속점이라고 할 수 있는데 네트웍 응용 프로그램은 소켓을 통하여 통신망으로 데이터를 송수신하게 된다.&lt;/li&gt;
  &lt;li&gt;네트워크 소켓은 컴퓨터 네트워크를 경유하는 프로세스 간 통신의 종착점이다.(위키백과)&lt;/li&gt;
  &lt;li&gt;네트워크 계층을 기준으로 보자면 소켓은 응용프로그램과 트랜스포트 계층 사이에서 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;소켓은 응용프로그램에서 TCP/IP를 이용하는 창구 역할을 하며 응용 프로그램과 소켓 사이의 인터페이스를 ‘소켓 인터페이스’라고 한다.&lt;/li&gt;
  &lt;li&gt;한 컴퓨터 내에는 보통 한 세트의 TCP/IP가 수행되고 있으며, 네트웍 드라이버는 LAN카드와 같은 네트웍 접속장치(NIU: Network Interface Unit)를 구동하는 소프트웨어를 말한다.&lt;/li&gt;
  &lt;li&gt;포트번호는 TCP/IP가 지원하는 상위 계층의 프로세스를 구분하기 위한 번호이므로 하나의 컴퓨터내에 있는 응용 프로세스들은 반드시 서로 다른 포트번호를 사용하여야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-queue-deque&quot;&gt;Stack, Queue, Deque&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;선형, 비선형
    &lt;ul&gt;
      &lt;li&gt;자료구조란 컴퓨터에서 처리할 자료를 효율적으로 관리하고 구조화시키기 위한 것. 즉 자료를 효율적으로 사용하기 위해 자료의 특성에 따라 분류하여 구성하고 저장 및 처리하는 모든 작업을 의미&lt;/li&gt;
      &lt;li&gt;자료구조는 정렬을 하거나 검색을 할 때, 인덱스 처리를 하거나 파일편성을 할 때 이용된다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/23202B4C53FDC5600C74C3&quot; alt=&quot;자료구조&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 한 곳(방향)으로 제한한 자료구조&lt;/li&gt;
      &lt;li&gt;선입선출(LIFO) 구조, push(), pop()&lt;/li&gt;
      &lt;li&gt;함수의 콜스택에 쓰이고 문자열을 역순으로 출력할 때, 연산자 후위표기법등에 쓰인다.&lt;/li&gt;
      &lt;li&gt;활용 예시: undo나 이전페이지 돌아가는것, 웹브라우저 방문기록, 역순 문자열 만들기&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/2214C14C53FDC5601E1C35&quot; alt=&quot;스택&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력이 각각 양 끝에서 이루어진 자료구조&lt;/li&gt;
      &lt;li&gt;후입선출(FiFO)구조 put(), get()&lt;/li&gt;
      &lt;li&gt;일반적인 큐의 단점: 큐에 메모리가 남아 있어도 꽉 차있는 것으로 판단할 수 있음 rear가 배열의 끝에 도달했을 경우 -&amp;gt; 개선된 원형 큐가 나옴&lt;/li&gt;
      &lt;li&gt;원형큐의 단점: 메모리 공간은 잘 활용하나 배열로 구현되어 있기 때문에 큐의 크기가 제한된다. -&amp;gt; 링크드리스트로 큐가 나옴&lt;/li&gt;
      &lt;li&gt;링크드리스트로 구현한 큐는 큐의 크기가 제한이 없고 삽입, 삭제가 편리하다.&lt;/li&gt;
      &lt;li&gt;활용 예시: 우선순위가 같은 작업 예약(인쇄 대기열), 콜센터 고객 대기 시간&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/2519EA4C53FDC5611706C9&quot; alt=&quot;큐&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deque
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 약 쪽 끝에서 가능하게 하는 자료구조&lt;/li&gt;
      &lt;li&gt;스크롤(scroll): 입력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;셸프(shelf): 출력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/221D914C53FDC56011326E&quot; alt=&quot;덱&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;도커란?
    &lt;ul&gt;
      &lt;li&gt;도커란 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 다양한 프로그램, 실행환경을 컨테이너로 추상화 하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨테이너(가상머신과의 차이점)
    &lt;ul&gt;
      &lt;li&gt;컨테이너는 격리된 공간에서 프로세스가 동작하는 기술이다. 가상화 기술의 하나지만 기존 방식과는 차이가 있다.&lt;/li&gt;
      &lt;li&gt;기존의 가상머신은 호스트 OS위에 게스트 OS전체를 가상화하여 사용하는 방식이다. 무겁고 느려서 운영환경에선 사용할 수 없었다.&lt;/li&gt;
      &lt;li&gt;이러한 상황을 개선하기 위해 CPU의 가상화 기술(HVM)을 이용한 KVM(Kernel-based Virtual Machine)과 반가상화(Paravirtualization)방식의 Xen이 등장한다. 이러한 방식은 게스트 OS가 필요하긴 하지만 전체 OS를 가상화하는 방식이 아니였기 때문에 호스트형 가상화 방식에 비해 성능이 향상되었다. 이러한 기술들은 클라우드 서비스에서 가상 컴퓨팅 기술의 기반이 되었다.&lt;/li&gt;
      &lt;li&gt;전가상화든 반가상화든 추가적인 OS를 설치하여 가상화하는 방법은 어쨌든 성능문제가 있었고 이를 개선하기 위해 프로세스를 격리 하는 방식이 등장한다. 리눅스 에서는 이 방식을 리눅스 컨테이너라고 하고 단순히 프로세스를 격리시키기 때문에 가볍고 빠르게 동작한다. CPU나 메로리는 딱 프로세스가 필요한 만큼만 추가로 사용하고 성능적으로도 거의 손실이 없다.&lt;/li&gt;
      &lt;li&gt;이러한 컨테이너라는 개념은 도커가 처음 만든 것은 아니었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지
    &lt;ul&gt;
      &lt;li&gt;도커에서 가장 중요한 개념은 컨테이너와 함께 이미지라는 개념이다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다. 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iaas-paas-saas&quot;&gt;IaaS, PaaS, SaaS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;최초 클라우드 서비스는 지메일이나 드롭박스, 네이버 클라우드처럼 소프트웨어를 웹에서 쓸 수 있는 SaaS가 대부분이었다. 그러다가 서버와 스토리지, 네트워크 같은 컴퓨팅 인프라 장비를 빌려주는 IaaS 플랫폼을 빌려주는 PaaS으로 늘어났다. 클라우드 서비스는 어떤 자원을 제공하느냐에 따라 이처럼 크게 3가지로 나뉜다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bloter.net/wp-content/uploads/2016/07/cast2_iaas-paas-saas.jpg&quot; alt=&quot;참고그림&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SaaS가 이미 만들어진 레고 모형, IaaS가 레고 공장이라면, PaaS는 레고 블럭이라 할 수 있다.&lt;/li&gt;
  &lt;li&gt;SaaS : SaaS는 클라우드 환경에서 운영되는 애플리케이션 서비스를 말한다. 모든 서비스가 클라우드에서 이뤄진다. 소프트웨어를 구입해서 PC에 설치하지 않아도 웹에서 소프트웨어를 빌려쓸 수 있다. 
SaaS는 필요할 때 원하는 비용만 내면 어디서든 곧바로 슬 수 있다는 장범이 있다. PC나 기업 서버에 소프트웨어를 설치할 필요가 없다. 소프트웨어 설치를 위해 비용과 시간을 들이지 않아도 된다. SaaS는 중앙에서 해당 소프트웨어를 관리하기 때문에 사용자가 일일이 업그레이드나 패치 작업을 할 필요도 없다.&lt;/li&gt;
  &lt;li&gt;PaaS : PaaS는 소프트웨어 서비스를 개발할 때 필요한 플랫폼을 제공하는 서비스다. 사용자는 PaaS에서 필요한 서비스를 선택해 애플리케이션을 개발하면 된다. PaaS 운영 업체는 개발자가 소프트웨어를 개발할 때 필요한 API를 제공해 개발자가 좀 더 편하게 앱을 개발할 수 있게 돕는다. 일종의 레고 블럭같은 서비스다. 개발자가 개발을 하는 데 필요한 도구와 환경을 사용하고, 사용한 만큼만 비용을 내기 때문에 개발자로선 비용 부담을 덜 수 있다. 단, 플랫폼 기반으로 애플리케이션을 개발하기 때문에 특정 플랫폼에 종속될 수 있다는 단점이 있다. A 서비스 업체의 PaaS에서 앱을 개발하고 이 작업을 이어서 B 외사의 PaaS에서 하기가 쉽지 않다는 뜻이다. 다양한 플랫폼에서 작업하려면 이에 맞게 앱을 수정하는 과정이 필요하다.&lt;/li&gt;
  &lt;li&gt;IaaS: 데이터센터를 구축하는 대신 클라우드를 이용해 필요한 컴퓨팅 인프라를 사용하는 걸 IaaS라고 부른다. 이용자는 서버나 스토리지를 구입,운영하는 비용을 줄일 수 있다. IaaS는 인터넷을 통해 서버와 스토리지 등 데이터센터 자원을 빌려 쓸 수 있는 서비스를 일컫는다. 이용자는 직접 데이터센터를 구축할 필요 없이 클라우드 환경에서 필요한 인프라를 꺼내 스면 된다. 이렇게 빌려온 인프라에서 사용자는 운영체제를 설치하고, 애플리케이션 등을 설치한 다음 원하는 서비스를 운영할 수 있다. 
IaaS는 가상 서버, 데이터 스토리지 같은 기존 데이터센터가 제공하는 서비스를 제공한다. 사용자는 이런 서비스를 조합해 애플리케이션을 실행하거나 운영할 수 있다. 게다가 물리적으로 만들어진 환경이 아니기 때문에 사용하지 않을 때 시스템을 해체하는 것도 손쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;database-index&quot;&gt;Database Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스틑 데이터베이스 분야에 있어서 테이블에 대한 동작의 속도를 높여주는 자료 구조를 일컫는다. 인덱스는 테이블 내의 1개의 컬럼, 혹은 여러개의 컬럼을 이용하여 생성될 수 있다. 고속의 검색 동작뿐만 아니라 레코드 접근과 관련 효율적인 순서 매김 동작에 대한 기초를 제공한다. 인덱스를 저장하는 데 필요한 디스크 공간은 보통 테이블을 저장하는 데 필요한 디스크 공간보다 작다. (왜냐하면 보통 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목들은 갖고 있지 않기 때문이다.) 관계형 데이터베이스에서는 인덱스는 테이블 부분에 대한 하나의 사본이다.
(위키백과)&lt;/li&gt;
  &lt;li&gt;INDEX란
RDBMS에서 검색속도를 높이기 위해 사용하는 하나의 기술. INDEX는 색인이다. 해당 Table의 컬럼을 색인화(따로 파일로 저장)하여 검색시 해당 Table의 레코드를 모두 스캔하는게 아니라 색인화 되어있는 INDEX파일을 검색하여 검색속도를 빠르게 한다. 이런 INDEX는 Tree구조로 색인화 한다. RDBMS에서 사용하는 INDEX는 Balance Search Tree를 사용한다. 실제로 RDBMS에서 사용되는 B-Tree는 B-Tree에서 파생된 B+Tree를 사용한다고 한다. 
(참고로 Oracle이나 MSSQL에서는 여러 종류의 Tree를 선택하여 사용가능하다.)&lt;/li&gt;
  &lt;li&gt;INDEX의 원리
INDEX를 해당 컬럼에 주게 되면 초기 Table생성시 만들어진 MYD, MYI, FRM 3개의 파일 중에서 MYI에 해당 컬럼을 색인화 하여 저장한다. 물론 INDEX를 사용하지 않을 시에는 MYI파일은 비어 있다. 그래서 INDEX를 해당컬럼에 만들게 되면 해당컬럼을 따로 인덱싱하여 MYI파일에 입력한다. 그래서 사용자가 SELECT쿼리로 INDEX가 사용하는 쿼리를 사용시 해당 Table을 검색하는 것이 아니라 빠른 Tree로 정리해둔 MYI파일의 내용을 검색한다. 만약 INDEX를 사용하지 않은 SELECT쿼리라면 해당 Table을 모두 스캔하여 검색한다. 이는 책의 뒷부분에 찾아보기와 같은 의미로 정리해둔 단어중에서 원하는 단어를 찾아서 페이지수를 보고 쉽게 찾을 수 있는 개념과 같다. 만약 이 찾아보기가 없다면 처음부터 끝까지 모든 페이지를 보고 찾아야 할 것이다.&lt;/li&gt;
  &lt;li&gt;INDEX의 장점
    &lt;ul&gt;
      &lt;li&gt;키 값을 기초로 하여 테이블에서 검색과 정렬 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;쿼리나 보고서에서 그룹화 작업의 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;인덱스를 사용하면 테이블 행의 공유성을 강화시킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;INDEX의 단점
    &lt;ul&gt;
      &lt;li&gt;인덱스를 만들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt;파일의 크기가 커진다.&lt;/li&gt;
      &lt;li&gt;여러 사용자가 사용하는 응용프로그램에서의 여러 사용자가 한 페이지를 동시에 수정할 수 있는 병행성이 줄어든다.&lt;/li&gt;
      &lt;li&gt;인덱스 된 필드에서 데이터를 업데이트하거나, 레코드를 추가 또는 삭제할 때 성능이 떨어진다.&lt;/li&gt;
      &lt;li&gt;인덱스가 데이터베이스 공간을 차지해 추가적인 공간이 필요해진다.(DB의 10퍼센트 내외의 공간이 추가로 필요)&lt;/li&gt;
      &lt;li&gt;데이터 변경 작업이 자주 일어날 경우에 인덱스를 재작성해야 할 필요가 있기에 성능에 영향을 끼칠 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DBMS
    &lt;ul&gt;
      &lt;li&gt;Data Base Management System&lt;/li&gt;
      &lt;li&gt;데이터베이스 관리 시스템(DBMS)은 다수의 사용자들이 데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합이다. DBMS는 사용자 또는 다른 프로그램의 요구를 처리하고 적절히 응답하여 데이터를 사용할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Balance Search Tree
    &lt;ul&gt;
      &lt;li&gt;트리구조의 높이를 작게 만들어 효율적으로 탐색할 수 있게끔 만든 구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MYD, MYI, FRM
    &lt;ul&gt;
      &lt;li&gt;MYD - Index정보가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;MYI - 실제 데이터가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;FRM - 테이블 구조가 저장되어 있는 파일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DDL, DML, DCL
    &lt;ul&gt;
      &lt;li&gt;DDL - 데이터베이스의 스키마 객체를 생성, 변경, 제거하거나 권한의 부여나 박탈, 주석, 자료의 버림 등을 수행하는 문장의 집단을 의미한다.&lt;/li&gt;
      &lt;li&gt;DML - 스키마 객체의 데이터를 입력, 수정, 조회, 삭제 하거나 테이블에 잠금을 설정하거나 SQL문의 처리에 대한 절차에 대한 정보를 얻거나 PL/-SQL 모듈을 호출하는 작업의 집단이다.&lt;/li&gt;
      &lt;li&gt;DCL - 데이터를 제어하는 언어, 데이터의 보안, 무결성, 회복, 병행 수행제어 등을 정의하는데 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;osi-모델&quot;&gt;OSI 모델&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;각 단계별 설명&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;계층&lt;/th&gt;
          &lt;th&gt; &lt;/th&gt;
          &lt;th&gt;내용&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;7 계층&lt;/td&gt;
          &lt;td&gt;응용계층&lt;/td&gt;
          &lt;td&gt;사용자에게 네트워크 서비스를 제공한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;6 계층&lt;/td&gt;
          &lt;td&gt;표현계층&lt;/td&gt;
          &lt;td&gt;데이터의 형식을 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5 계층&lt;/td&gt;
          &lt;td&gt;세션계층&lt;/td&gt;
          &lt;td&gt;데이터의 송수신의 순서 등을 관리한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4 계층&lt;/td&gt;
          &lt;td&gt;전송계층&lt;/td&gt;
          &lt;td&gt;신뢰성이 높은(에러가 적은)전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3 계층&lt;/td&gt;
          &lt;td&gt;네트워크계층&lt;/td&gt;
          &lt;td&gt;전송 규칙과 수신처를 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2 계층&lt;/td&gt;
          &lt;td&gt;데이터링크계층&lt;/td&gt;
          &lt;td&gt;인접기기 사이의 데이터 전송을 제어한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1 계층&lt;/td&gt;
          &lt;td&gt;물리계층&lt;/td&gt;
          &lt;td&gt;전기,기계적인 부분의 전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향개발oop-4가지-특성&quot;&gt;객체지향개발(OOP) 4가지 특성&lt;/h3&gt;

&lt;p&gt;https://wayhome25.github.io/cs/2017/04/10/cs-11/&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html">면접 준비를 단순히 면접만 준비하기 위한 것이 아니라, 개발자로서 일하기 위해 알고 있어야할 기본 지식들을 잘 공부할 수 있는 기회로서 면접준비 시간을 가져갈 생각이다.</summary></entry><entry><title type="html">Project News Collecter</title><link href="https://zooozoo.github.io/records/2018-03-23-PROJECT-NEWS-COLLECTER/" rel="alternate" type="text/html" title="Project News Collecter" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/PROJECT-NEWS-COLLECTER</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-03-23-PROJECT-NEWS-COLLECTER/">&lt;h1 id=&quot;나만의-뉴스-스탠드-news-collecter-프로젝트를-진행하며-기록해-놓은-자료입니다&quot;&gt;나만의 뉴스 스탠드 NEWS-COLLECTER 프로젝트를 진행하며 기록해 놓은 자료입니다.&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Custom Homepage Project &lt;a href=&quot;https://www.news-collecter.com/&quot;&gt;www.news-collecter.com&lt;/a&gt;&lt;/strong&gt;
홈페이지로 쓰고자 직접 제작한 웹사이트 입니다.
주기적으로 포탈과 언론사의 메인 기사 제목을 10개정도씩 가져와 한 화면에 보여주는 사이트입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고한-사이트-모음&quot;&gt;참고한 사이트 모음&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/546960/HTML-Quick-Start-Web-Application&quot;&gt;html 레이아웃 관련&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;프로젝트 Github : https://github.com/zooozoo/homepage-project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if statement에서 else를 쓰는게 좋은지 아니면 그냥 return 하는게 좋은지에 관한 이야기, 속도나 기능적인 부분에서 차이는 없고
얼마나 읽기 편한지와같은 문제가 고려되는데 else를 쓰기보다는 바로 return하는 방식이 더 좋다는 의견이 많다. 관련 논쟁 스택오버플로우 링크
&lt;a href=&quot;https://stackoverflow.com/questions/14844531/is-it-preferable-to-use-an-else-in-python-when-its-not-necessary&quot;&gt;https://stackoverflow.com/questions/14844531/is-it-preferable-to-use-an-else-in-python-when-its-not-necessary&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/9191388/it-is-more-efficient-to-use-if-return-return-or-if-else-return&quot;&gt;https://stackoverflow.com/questions/9191388/it-is-more-efficient-to-use-if-return-return-or-if-else-return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음-단계&quot;&gt;다음 단계&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;user과 화면에서 동적으로 언론사 배치순서를 조정할 수 있도록 만들기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;나중에-해야할-일&quot;&gt;나중에 해야할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;header 파트 레이아웃 리팩터링 필요
-&amp;gt; 부트스트랩 레이아웃 사용해서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;크롤링한 데이터에서 ‘문답’과 같은 요소들 없애기
-&amp;gt; 글자수에 조건을 걸어서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nav에 news_select_section에서 한글로 언론사이름 보여줄 수 있게 수정
-&amp;gt; filed에 verbose name 설정하고, index.html의 card header 부분에 field.name을 field.value로 변경해서 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;main에 checkbox form에 initial data 전달하는거 더 효율적으로 할 수 있는지 살펴보기
-&amp;gt; model form 이기 때문에 데이터베이스에서 가져온 모델 인스턴스를 전달함으로써 initiated된 폼을 사용할 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;에러가 나면 데이터베이스에 있는 내용을 끌어올 수 있도록 만들기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;news-select-section에 있는 checkbox를 1열 래이아웃으로 바꾸기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;산발적으로 발생하는 에러 잡기
에러&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  File &quot;/home/zoozoo/projects/project-hp/my_homepage/main/utils.py&quot;, line 230, in khan_news_title
    title=soup.find('div', class_='topNews').a.text,
  AttributeError: 'NoneType' object has no attribute 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개발과정에-대한-기록&quot;&gt;개발과정에 대한 기록&lt;/h2&gt;

&lt;h3 id=&quot;배포를-위한-기본-세팅&quot;&gt;배포를 위한 기본 세팅&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;aws계정 생성&lt;/li&gt;
  &lt;li&gt;IAM 유저와, 보안그룹 생성&lt;/li&gt;
  &lt;li&gt;aws cli를 활용해 기본정보 등록&lt;/li&gt;
  &lt;li&gt;local 에서 postgres 연결 확인&lt;/li&gt;
  &lt;li&gt;settings 를 패키지로 만들고 deploy 와 dev용 setting 모듈 분리&lt;/li&gt;
  &lt;li&gt;RDS, S3와 연결되고 로컬에서 80번port로 접속 가능한 docker만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;docker를-만드는-과정에서-있었던-일&quot;&gt;docker를 만드는 과정에서 있었던 일&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker를 만드는 과정에서 basedocker를 새로 구성할 필요가 있어서 간단하게 새 명령어를 집어넣고 새로 buil를 하는데 pyenv를 의존성문제를 해결하기 위한 구성을 다울로드 하는 과정에 에러가 발생했다.

```
E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/t/tzdata/tzdata_2016j-0ubuntu0.16.04_all.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm2_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.3_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/libx/libxml2/libxml2_2.9.3+dfsg1-1ubuntu0.3_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/main/c/curl/curl_7.47.0-1ubuntu2.4_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-amdgpu1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-intel1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-nouveau2_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-radeon1_2.4.76-1~ubuntu16.04.1_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libglapi-mesa_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libgl1-mesa-dri_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/m/mesa/libgl1-mesa-glx_17.0.7-0ubuntu0.16.04.2_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-dev_1.0.2g-1ubuntu4.8_amd64.deb  404  Not Found [IP: 91.189.88.152 80]

E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl-doc_1.0.2g-1ubuntu4.8_all.deb  404  Not Found [IP: 91.189.88.152 80]

E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
The command '/bin/sh -c apt-get install -y make build-essential             libssl-dev zlib1g-dev libbz2-dev             libreadline-dev libsqlite3-dev wget             curl llvm libncurses5-dev libncursesw5-dev             xz-utils tk-dev' returned a non-zero code: 100
```

대략 이런 에러였는데 `apt-get update`부분을 살펴보니 이전에 같은 태그명으로 생성했던 적이 있어서 캐시를 사용해 build 하는 것을 확인했다. 캐쉬를 쓰지 않고 생으로 docker를 빌드하기 위한 명령어는 `--no-cache`명령어를 붙여주면 된다.
[관련 답변내용 link](https://stackoverflow.com/questions/35594987/how-to-force-docker-for-clean-build-of-an-image?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa)

설치중에 `debconf: delaying package configuration, since apt-utils is not installed`이런 에러가 있었는데 해당 내용이 [링크](https://github.com/phusion/baseimage-docker/issues/319)에 논의된 적이 있었고 일단 빌드가 완성되는 것으로 보아 별 문제가 없다고 판단 계속 진행하도록 하겠다. (추후 무슨 문제가 생겼을 경우 해결하기 위한 기록)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;elasticbeanstalk-구축하기&quot;&gt;elasticbeanstalk 구축하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;키페어 profile 설정문제&lt;/p&gt;

    &lt;p&gt;awscli에서 사용하는 기본 프로파일은 환경변수로 설정되어 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_PROFILE=user2&lt;/code&gt;명령을 통해 환경변수를 설정함으로써 매번 profile을 지정하지 않아도 된다.
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-multiple-profiles.html&quot;&gt;관련링크&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;eb cli 환경에서 키페어 profile 설정문제&lt;/p&gt;

    &lt;p&gt;eb cli를 사용 할 경우 추가적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_EB_PROFILE=user2&lt;/code&gt; 명령을 통해 eb default 환경변수를 설정해 주어야만 한다
&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/eb-cli3-configuration.html#eb-cli3-profile&quot;&gt;관련링크&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;elasticbeanstalk에서 최신버전의 docker를 지원하지 않아 발생하는 문제라고 생각 -&amp;gt; docker를 삭제하고 다시 설치하기로 결정&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;삭제하려고 하는데 docker를 찾지 못함 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg -l | grep -i docker&lt;/code&gt; 명령어로 설치된 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-ce&lt;/code&gt;확인후에 삭제
&lt;a href=&quot;https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;특정버전의 docker를 설치 &lt;a href=&quot;https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker를 재설치 해도 같은문제가 발생했고, 문제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;이 포함되어 있기 때문이었다. -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;.ebignore&lt;/code&gt;추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결론적으로는 docker의 버전이 다른게 문제가 되는지는 정확하기 확인하진 못했지만 그래도 일단 버전을 맞추는게 좋을 것으로 판단된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;request-한글-깨짐현상&quot;&gt;request 한글 깨짐현상&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Beautifulsoup 에서 깨지는걸로 생각했는데, request모듈에서의 encoding문제였다. 참고한 블로그와 사이트
  &lt;a href=&quot;http://sfixer.tistory.com/entry/python3-beautifulsoup-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90&quot;&gt;http://sfixer.tistory.com/entry/python3-beautifulsoup-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90&lt;/a&gt;
  &lt;a href=&quot;http://pythonstudy.xyz/python/article/403-%ED%8C%8C%EC%9D%B4%EC%8D%AC-Web-Scraping&quot;&gt;http://pythonstudy.xyz/python/article/403-%ED%8C%8C%EC%9D%B4%EC%8D%AC-Web-Scraping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;더 간단한 해결책 발견
  &lt;code class=&quot;highlighter-rouge&quot;&gt;request.text&lt;/code&gt; -&amp;gt; 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode&lt;/code&gt;로 가져옴
  &lt;code class=&quot;highlighter-rouge&quot;&gt;request.content&lt;/code&gt; -&amp;gt; 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;형으로 가져옴
  &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;형으로 가져오면 간단하게 문자를 사용할 수 있다.
  참고한 블로그
  &lt;a href=&quot;http://pwnbit.kr/85&quot;&gt;http://pwnbit.kr/85&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requestsexceptionstoomanyredirects-exceeded-30-redirects-에러-관련&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requests.exceptions.TooManyRedirects: Exceeded 30 redirects.&lt;/code&gt; 에러 관련&lt;/h3&gt;

&lt;h3 id=&quot;문자열에-탭이나-줄바꿈-문자-제거하는-것&quot;&gt;문자열에 탭이나, 줄바꿈 문자 제거하는 것&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10711116/strip-spaces-tabs-newlines-python/10711166#comment25234743_10711116&quot;&gt;stackoverflow 답변&lt;/a&gt;
  위의 답변들 중에 나는 아래의 방법으로 해결&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I want to Remove all white &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; spaces, new lines &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; and tabs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'I want to Remove all white spaces, new lines and tabs '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input태그를-disabled-처럼-보이게-만들고-readonly-처럼-사용하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;태그를 disabled 처럼 보이게 만들고 readonly 처럼 사용하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7743208/making-a-text-input-field-look-disabled-but-act-readonly&quot;&gt;stackoverflow 답변&lt;/a&gt;처럼 해결 할 수도 있을 것 같다.
  다만 난 답변을 찾다가 django forms의 widget설정에서 readonly 옵션을 넣어봤더니 disabled와 같은 모습으로 템플릿에 나와서 그대로 사용했다.&lt;/p&gt;

&lt;h3 id=&quot;crawler_testpy-python-script에서-django의-model-을-import하여-실행하기-위한-세팅&quot;&gt;crawler_test.py python script에서 django의 model 을 import하여 실행하기 위한 세팅&lt;/h3&gt;

&lt;p&gt;django 자체를 import해서 어떤 환경변수를 설정해줘야만 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 내가 적용했던 세팅&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import os
  import django

  os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;my_homepage.settings&quot;)
  django.setup()

  from main.models import NewsTitle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15048963/alternative-to-the-deprecated-setup-environ-for-one-off-django-scripts?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;참고한 stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;celery-를-활용하여-크롤링한-데이터-저장하기&quot;&gt;celery 를 활용하여 크롤링한 데이터 저장하기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;celery beat를 활용 -&amp;gt; 폐기
    주기적으로 크롤링을 작동시켜서 크롤링한 데이터를 저장하려 했으나 elasticbeanstalk와 docker를 활용하여 배포할 경우 auto scaling시에 문제가 발생할 수 있다. (같은 ec2가 여러개 생길경우 인스턴스 갯수 마다 beat가 따로 동작하기 때문에 크롤링이 중복되는 문제 발생)
    -&amp;gt; 데이터 생성시간을 체크해서 일정시간이 지나지 않았으면 작동하지않게 할 수도 있다. -&amp;gt; que요청과 시간을 확인하는 로직은 항상 들어가야 하기 때문에 delay보다 자원이 더 낭비될 가능성이 크다.&lt;/li&gt;
  &lt;li&gt;celery delay 활용
    created time field를 활용해 request마다 데이터베이스의 크롤링 데이터가 stale 한 경우 delay로 크롤링작업 실행. concurrency 문제가 발생할 수 있기 때문에 celery task 작동시에 database lock을 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;celery-docker에서-작동해보기---폐기&quot;&gt;celery docker에서 작동해보기 -&amp;gt; 폐기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;default user는 locallhost환경으로만 접속가능하기 때문에 새로운 user를 만들어 줘야 한다.
    &lt;code class=&quot;highlighter-rouge&quot;&gt;rabbitmqctl add_user username password&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;aws-sqs를-활용하여-celery를-사용하기로-함&quot;&gt;aws sqs를 활용하여 celery를 사용하기로 함&lt;/h3&gt;
&lt;p&gt;celery 실행시 &lt;code class=&quot;highlighter-rouge&quot;&gt;pycurl&lt;/code&gt;을 설치하라고 함, &lt;code class=&quot;highlighter-rouge&quot;&gt;pycurl&lt;/code&gt; 을 설치하기 위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libcurl4-openssl-dev&lt;/code&gt; 해당 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl4-openssl-dev&lt;/code&gt;라는걸 설치해야만 함 설치후 로컬환경에서 잘 작동
  &lt;a href=&quot;https://stackoverflow.com/questions/23937933/could-not-run-curl-config-errno-2-no-such-file-or-directory-when-installing&quot;&gt;pycurl 설치관련 stackoverflow 답변&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;elasticbeanstalk에서-내-도메인-이름-사용하기&quot;&gt;elasticbeanstalk에서 내 도메인 이름 사용하기&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;route53 등록전 name서버를 aws로 교체
  &lt;a href=&quot;http://wingsnote.com/57&quot;&gt;참고 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;route53에서 내 도메인과 elb 도메인 연결하기
  &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/customdomains.html&quot;&gt;route 53 설명서&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;request-수정하기&quot;&gt;request 수정하기&lt;/h3&gt;
&lt;p&gt;경향신문 크롤러에서 요청하면 산발적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;page not found&lt;/code&gt;를 response 하는 경우가 발생했다. 이럴경우 기존에 beautifulsoup으로 크롤링 하는 구조에서
  아래와 같은 에러를 뿜게된다.
  에러&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    File &quot;/home/zoozoo/projects/project-hp/my_homepage/main/utils.py&quot;, line 230, in khan_news_title
      title=soup.find('div', class_='topNews').a.text,
    AttributeError: 'NoneType' object has no attribute 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;try, except문으로 해결하려 했으나 조금 더 검색해 보니 request할 때 브라우저에서 확인하는 것과 같은 page를 받기 위해서는 header에 관련 내용을 함께
  요청해야 한다는 것을 알게 되었다.
  &lt;a href=&quot;https://stackoverflow.com/questions/27652543/how-to-use-python-requests-to-fake-a-browser-visit?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;stackoverflow 답변&lt;/a&gt;
  아래와 같이 request의 header에 관련내용을 추가해 줌으로써 브라우져에서 확인하는 것과 같은 response를 받게 되었다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://www.khan.co.kr/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html">나만의 뉴스 스탠드 NEWS-COLLECTER 프로젝트를 진행하며 기록해 놓은 자료입니다.</summary></entry><entry><title type="html">Project Explog</title><link href="https://zooozoo.github.io/records/2018-03-23-PROJECT-EXPLOG/" rel="alternate" type="text/html" title="Project Explog" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/PROJECT-EXPLOG</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-03-23-PROJECT-EXPLOG/">&lt;h1 id=&quot;나의-여행기-기록-sns-explog를-개발하며-기록해-놓은-자료입니다&quot;&gt;나의 여행기 기록 SNS EXPLOG를 개발하며 기록해 놓은 자료입니다.&lt;/h1&gt;

&lt;h2 id=&quot;11-21-화요일&quot;&gt;11-21 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;서버 사전세팅관련&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도커만들기&lt;/li&gt;
  &lt;li&gt;postgresql rds 연결&lt;/li&gt;
  &lt;li&gt;boto3 s3연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-22-수요일&quot;&gt;11-22 수요일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;installed apps에 corsheaders 추가하고 사용하는 것 확인해보기&lt;/p&gt;

    &lt;p&gt;다른 도메인에서 우리쪽 자원을 요청할 때 그걸 허용하기 위해서 추가해 놓은 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;settings.py 수정&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;base.py
        &lt;ol&gt;
          &lt;li&gt;base.py facebook 관련설정 일단 주석처리&lt;/li&gt;
          &lt;li&gt;base.py  database관련 설정 삭제&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;local.py
        &lt;ol&gt;
          &lt;li&gt;local.py debug true로 바꿔놓기&lt;/li&gt;
          &lt;li&gt;random, string 삭제&lt;/li&gt;
          &lt;li&gt;allowed hosts 에 elasticbeanstalk 삭제&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;dev.py
        &lt;ol&gt;
          &lt;li&gt;S3_USE_SIG4 확인해 보기 (강사님 자료에는 없음)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;deploy.py
        &lt;ol&gt;
          &lt;li&gt;allowed hosts에 url 추가&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;s3 설정 관련 강의자료는 10.30 자에 있음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-23-목요일&quot;&gt;11-23 목요일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;환경변수 설정관련 명령어 기록
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export DJANGO_SETTINGS_MODULE=config.settings.dev&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-24-금요일&quot;&gt;11-24 금요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;기획 확정되기 전이라도 할 수 있는 것들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;member앱 만들기
    &lt;ul&gt;
      &lt;li&gt;signup, login, logout, 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post앱 만들기
    &lt;ul&gt;
      &lt;li&gt;post create, post list, post detail&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-27-월요일&quot;&gt;11-27 월요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;이메일 인증 구글에서 허용하는 설전 전까지의 기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;apis.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SignupSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# user = serializer.validated_data&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# user.is_active = False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user_pk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current_site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_current_site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'acc_active_email.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'domain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'uid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlsafe_base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_activation_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mail_subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Activate your blog account.'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;to_email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mail_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# return Response(serializer.data)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTP_400_BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uidb64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlsafe_base64_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uidb64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;OverflowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_activation_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# login(request, user)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# return redirect('home')&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Thank you for your email confirmation. Now you can login your account.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Activation link is invalid!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tokens.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.tokens&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PasswordResetTokenGenerator&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;six&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountActivationTokenGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordResetTokenGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_make_hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;six&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;six&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;six&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;account_activation_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountActivationTokenGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;urls.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.apis&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^login/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^signup/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'signup'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^activate/(?P&amp;lt;uidb64&amp;gt;[0-9A-Za-z_\-]+)/(?P&amp;lt;token&amp;gt;[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'activate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;acc_active_email.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% autoescape off %}
Hi {{ user.username }},
Please click on the link to confirm your registration,

http://{{ domain }}{% url 'member:activate' uidb64=uid token=token %}
{% endautoescape %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;회의&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;회원가입시 사용 필드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;email, nickname, imgprofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-28-화요일&quot;&gt;11-28 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;token auth duration  관련조사&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22943050/how-long-is-token-valid-django-rest-framework&quot;&gt;스택오버플로우 토큰인증 기간&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14567586/token-authentication-for-restful-api-should-the-token-be-periodically-changed&quot;&gt;스택오버플로우 토큰인증기간 설정관련 답변&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/throttling/&quot;&gt;drf 공식문서 throttling 관련&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;강사님 조언 : throtting은 token auth duration customizing 관련해서 사용하는 기능이 아니다. 스택오버플로우에 나와있는 것 처럼 해야하는데 앱을 하나 새로 만들어서 토큰 데이터베이스에 로직을 통하여 특정순간의 시간을 기록하고 해당 시간을 기준으로 해서 인증 만료 기한을 설정할 수 있다. 설정하기 까다로운 점들이 있기 때문에 extra 기능으로 생각해서 진행하는게 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;알아봐야 할 것들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;corsheaders : 강의 때 했던 프로젝트에 보면 installed apps에 corsheaders가 추가 되어있는데 어떨 때 사용하는거고 우리 프로젝트에 필요한건지 확인해보기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;팀원들의 의견을 들어봐야 할 것들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;post list의 pagination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;강사님 동영상에 settings.py 에 LOGIN_URL = ‘member:login’ 기록한 이유&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The URL where requests are redirected for login, especially when using the &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;login_required()&lt;/code&gt;&lt;/a&gt;decorator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Post 관련 기록&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;author를 username으로 바꾸는 방법 관련 링크
    &lt;ul&gt;
      &lt;li&gt;http://www.django-rest-framework.org/api-guide/relations/#reverse-relations&lt;/li&gt;
      &lt;li&gt;http://www.django-rest-framework.org/api-guide/relations/#slugrelatedfield&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;SerializerMethod 로 해결&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스명과 api를 좀더 명시적으로 refactoring 할 필요 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;user 정보와 연동하는 부분 확인하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;post-reply에서 post 요청시에 foreign key로 연결된 post의 pk와, author의 pk를 각각 직업 입력해 줘야 한다.
    &lt;ul&gt;
      &lt;li&gt;언뜻 생각한 솔루션으로는 serializer에서 request의 author 정보를 받아와서 저장 하면 될 것 같다는 생각…&lt;/li&gt;
      &lt;li&gt;리플을 작성할 때 작성하는 곳의 포스트를 default로 지정해 놓을 수만 있다면 쉽게 해결 가능한데, 지금으로선 backend에서 해결 할 수 있는 문제가 아닌 것 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post-text-create 에서 post요청시 authorization 인증 요구를 하지 않는 문제, 또한 위와 같이 해당 post의 pk값을 직접 입력해 줘야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post-path-create 에서 post요청시 authorization 인증 요구를 하지 않는 문제,  해당 post의 pk값을 직접 입력해 줘야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;사진 크기 한도 적어줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Post api body입력정보&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;post-create: 입력정보 / authorization 필요
    &lt;ul&gt;
      &lt;li&gt;author(user의 pk값), title, start_date(반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;2017-11-28T02:01:00+09:00&lt;/code&gt;형식이어야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post-reply: 입력정보 / post 요청시 authorization 필요 / get 요청시 전체 리스트 반환
    &lt;ul&gt;
      &lt;li&gt;post: post의pk값, author: author의pk값, content&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post-reply-update:
    &lt;ul&gt;
      &lt;li&gt;포스트에 상관없이 리플의 pk값을 기준으로 해당 리플의 내용을 보여준다.&lt;/li&gt;
      &lt;li&gt;delete 요청을 통해 해당 리플 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post-text-create / post 요청시 authorization 요구안함
    &lt;ul&gt;
      &lt;li&gt;title, content, post(해당 포스트의 pk 값을 입력해줘야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post-text-detail
    &lt;ul&gt;
      &lt;li&gt;text의 pk값을 기준으로 해당 text 불러옴&lt;/li&gt;
      &lt;li&gt;delete 요청을 통해 해당 text 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post-path-create / post 요청시 authorization 요구안함
    &lt;ul&gt;
      &lt;li&gt;lat(위도, float), lng(경도, float), post&lt;/li&gt;
      &lt;li&gt;post 에 pk값 입력해 줘야함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-29-수요일&quot;&gt;11-29 수요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;팀원들의 의견을 들어봐야 할 것들(어제꺼에 이어서)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;post list의 pagination&lt;/li&gt;
  &lt;li&gt;사진 한번에 올릴 수 있는 갯수(나는 최대 10장정도 생각하고 있음)&lt;/li&gt;
  &lt;li&gt;올리사진을 한번에 묶음으로 보여주는 걸 앱쪽에서 해줄 수는 없는지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;오늘 작업한 내용&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;post list&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;author를 pk값이 아닌 username으로 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post create&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;author에 값을 입력하지 않아도 자동으로 usename이 추가될 수 있도록 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post detail&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;post의 author 값 -&amp;gt; username으로 보이게끔 변경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post reply (create reply)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;permission classes 추가&lt;/li&gt;
      &lt;li&gt;post 요청시 author pk를 입력하지 않아도 인증된 username이 나오게끔 변경&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;리플 post 요청시에는 어떤 post와 연결되어 있는 정보인지 앱쪽에서 정보를 넘겨줘야 한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post-text-create&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;author정보를 확인하는 로직은 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;post text에 author permission 추가하는거 시도할 때 썼던 코드.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostTextSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializerMethodField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostText&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'pk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'created_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_pk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;validate(self, data) 메서드에서 date를 print 해보면&lt;code class=&quot;highlighter-rouge&quot;&gt;OrderedDict([('title', 'text test1'), ('content', 'test11111'), ('post', &amp;lt;Post: Post object&amp;gt;)])&lt;/code&gt;이렇게 나오고 author 필드가 나오지 않아서, post의 author와 text의 author를 비교할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text_author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'request.user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# text_author = data['author']&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'해당 post의 작성자만 글을 작성할 수 있습니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 내용을 아래의 방법으로 실마리를 찾아가는중, 현재로선 if 논리가 전혀 먹히지 않음&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 오류 발생시 프린트 되는 내용&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;OrderedDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'text test1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test11111'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;class '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;shz@gmail.com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;shz@gmail.com&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;이슈&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;request user가 포스트의 author가 아니면 해당 포스트가 가지고 있는 text를 작성하지 못하도록 막고 싶은데 잘 안된다.&lt;/li&gt;
  &lt;li&gt;모델링에 문제가 있음을 발견 -&amp;gt; 해결방법으로는 사진 올리기 버튼을 누르면 photo item 테이블을 자동으로 생성하게 하고 다른 url에서 해당 photo item필드와 foreignkey로 연결해서 사진을 upload한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;크리에잇 테스트부터 시작하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;11-30-목요일&quot;&gt;11-30 목요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;작업내용 (model 리모델링)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;post create&lt;/li&gt;
  &lt;li&gt;post list&lt;/li&gt;
  &lt;li&gt;subpost create&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;회의&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;password - 하나만 받기&lt;/li&gt;
  &lt;li&gt;구성을  User 안에 토큰값 넣기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;12-3-일요일&quot;&gt;12-3 일요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;user 가 작성한 post list 가져오기 성공 apis.py 기록&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;return_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;return_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Tocken auth logout stackoverflow answer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/30739352/django-rest-framework-token-authentication-logout&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;날씨정보를 가져와서 보여주려고 한다면 다음의 블로그의 3번 을 다시 읽어보자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;http://swchoi06.tistory.com/entry/%EC%93%B8%EB%A7%8C%ED%95%9C-%EB%82%A0%EC%94%A8-API&lt;/p&gt;

&lt;h2 id=&quot;12-4-월요일&quot;&gt;12-4 월요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;팔로잉/팔로우 기능 관련 인스타그램 예시&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'석헌주'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'이한영'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'이경'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'한재중'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;following_user_relations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이경&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follower_relations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;석헌주&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;following_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이경&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuerySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이한영&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-5-화요일&quot;&gt;12-5 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;오늘 작업할 것&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;팔로우/팔로잉 기능 완성하기
    &lt;ul&gt;
      &lt;li&gt;모델 만들고 기능확인&lt;/li&gt;
      &lt;li&gt;api로 어떻게 보여줄 것인지 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이슈사항
    &lt;ul&gt;
      &lt;li&gt;자기 자신을 follow 할 수 있는 부분을 막아야함&lt;/li&gt;
      &lt;li&gt;to_user의 pk가 존재하지 않는 user instance 일경우 나오는 에러를 잡아야 한다
        &lt;ul&gt;
          &lt;li&gt;받은 pk값(integer)를 활용해 User instance인지 확인할 수 있는 방법에 관한 구글 서치 내용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;새로 알게 된점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serializer context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;serializer 클래스에서 request 정보를 가져 오려면 아래 와 같이 context를 추가해 준 후에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serializer = FollwingSerializer(
            data=data,
            context={'request': request}
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;serializer 클래스 에서 다음고 같이 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.context['request'] -&amp;gt; &amp;lt;rest_framework.request.Request object at 0x7fcb9ceb34a8&amp;gt; 반환
self.context['request'].user -&amp;gt; request한 user를 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;field 타입에서 발생하는 에러메시지 커스터마이징&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26943985/custom-error-messages-in-django-rest-framework-serializer&quot;&gt;관련답변 stackoverflow&lt;/a&gt; -&amp;gt; 실패함&lt;/p&gt;

&lt;h2 id=&quot;12-6-수요일&quot;&gt;12-6 수요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;deploy 할 때 internal server error 해결한 기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;uwsgi 에러 로그&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** Starting uWSGI 2.0.15 (64bit) on [Wed Dec  6 06:03:43 2017] ***
compiled with version: 5.4.0 20160609 on 31 October 2017 07:17:38
os: Linux-4.10.0-38-generic #42~16.04.1-Ubuntu SMP Tue Oct 10 16:32:20 UTC 2017
nodename: b24083e148e0
machine: x86_64
clock source: unix
detected number of CPU cores: 4
current working directory: /srv/app/explog
writing pidfile to /tmp/app.pid
detected binary path: /root/.pyenv/versions/3.6.2/envs/app/bin/uwsgi
!!! no internal routing support, rebuild with pcre support !!!
uWSGI running as root, you can use --uid/--gid/--chroot options
*** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
chdir() to /srv/app/explog
your memory page size is 4096 bytes
detected max file descriptor number: 1048576
lock engine: pthread robust mutexes
thunder lock: disabled (you can enable it with --thunder-lock)
uwsgi socket 0 bound to UNIX address /tmp/app.sock fd 3
Python version: 3.6.2 (default, Oct 31 2017, 07:04:27)  [GCC 5.4.0 20160609]
PEP 405 virtualenv detected: /root/.pyenv/versions/app
Set PythonHome to /root/.pyenv/versions/app
Python main interpreter initialized at 0x22efbe0
python threads support enabled
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 145536 bytes (142 KB) for 1 cores
*** Operational MODE: single process ***
Traceback (most recent call last):
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/apps/config.py&quot;, line 111, in create
    entry = module.default_app_config
AttributeError: module 'post' has no attribute 'default_app_config'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;./config/wsgi/__init__.py&quot;, line 1, in &amp;lt;module&amp;gt;
    from .local import *
  File &quot;./config/wsgi/local.py&quot;, line 16, in &amp;lt;module&amp;gt;
    application = get_wsgi_application()
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/core/wsgi.py&quot;, line 13, in get_wsgi_application
    django.setup(set_prefix=False)
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/__init__.py&quot;, line 27, in setup
    apps.populate(settings.INSTALLED_APPS)
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/apps/registry.py&quot;, line 85, in populate
    app_config = AppConfig.create(entry)
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/apps/config.py&quot;, line 114, in create
    return cls(entry, module)
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/apps/config.py&quot;, line 44, in __init__
    self.path = self._path_from_module(app_module)
  File &quot;/root/.pyenv/versions/app/lib/python3.6/site-packages/django/apps/config.py&quot;, line 77, in _path_from_module
    &quot;with a 'path' class attribute.&quot; % (module, paths))
django.core.exceptions.ImproperlyConfigured: The app module &amp;lt;module 'post' (namespace)&amp;gt; has multiple filesystem locations (['/srv/app/explog/post', './post']); you must configure this app with an AppConfig subclass with a 'path' class attribute.
unable to load app 0 (mountpoint='') (callable not found or import error)
*** no app loaded. going in full dynamic mode ***
spawned uWSGI master process (pid: 14)
spawned uWSGI worker 1 (pid: 22, cores: 1)
subprocess 15 exited with code 0
--- no python application found, check your startup logs for errors ---
[pid: 22|app: -1|req: -1/1] 172.17.0.1 () {44 vars in 749 bytes} [Wed Dec  6 15:03:58 2017] POST /member/login/ =&amp;gt; generated 21 bytes in 0 msecs (HTTP/1.1 500) 2 headers in 83 bytes (0 switches on core 0)
--- no python application found, check your startup logs for errors ---

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해결방법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;강복이꺼를 merge시킨 이후에 추가된 각 모듈에 __init__.py 가 없어서 생긴 문제
__init.py__를 추가한 이후에 작동함
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고한 stackoverflow 링크&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/28205264/django-app-improperly-configured-the-app-module-has-multiple-filesystem-locati&lt;/p&gt;

&lt;p&gt;더 알게된 점&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;uwsgi 에러 로그를 확인할 때 가장 아랫쪽에 나온 요청처리관련 에러로그를 포함하여 윗쪽에 상세하게 적혀있는 에러로그를 확인하면 좀더 수월하게 에러내용을 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;프로필 페이지에 해야할 작업 목록&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사진&lt;/li&gt;
  &lt;li&gt;팔로워 팔로잉 수&lt;/li&gt;
  &lt;li&gt;세팅&lt;/li&gt;
  &lt;li&gt;포스트, 라이크, 드래프트&lt;/li&gt;
  &lt;li&gt;4번에 따른 화면&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 내용을 바탕으로 내가 해야할 것들&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사진 -&amp;gt; user 프로필사진 보여주는 로직&lt;/li&gt;
  &lt;li&gt;팔로워 팔로잉 수 -&amp;gt; 한번에 정보 가져올 수 있게 처리&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;포스트, 라이크, 드래프트 -&amp;gt; 해당유져가 좋아요 누른 포스트리스트, 본인이 작성한 포스트리스트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;user 정보를 받아오는 url (사진, username, email, 팔로잉숫자/팔로워숫자 포함)&lt;/li&gt;
  &lt;li&gt;본인이 작성한 포스트리스트를 보여주는 url&lt;/li&gt;
  &lt;li&gt;해당 user가 좋아요 누른 포스트 리스트 보여주는 url&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 세가지를 한번에 보여주는 url 로직 구현해봐야 함&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user = {
유저 정보
}
post = {
내가 작성한 post 정보
}
like_post = {
좋아요 누른 post 정보
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;내가 팔로우한 사람 리스트 보여주는 url&lt;/li&gt;
  &lt;li&gt;나를 팔로우한 사람 리스트 보여주는 url&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-7-목요일&quot;&gt;12-7 목요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;오늘 할 일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로필 url 구조 확정되면 프로필 기능 만들기
    &lt;ul&gt;
      &lt;li&gt;url 구조 확정되면 바로 만들기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;언팔기능 만들기
    &lt;ul&gt;
      &lt;li&gt;만들어진 url로 다시 요청을 하면 언팔을 하도록 할지 아니면 url 하나를 더 만들어서 언팔기능을 구현할지 상의 후 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;user 정보 수정 기능 만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;언팔 관련해서 알아둘 점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user.following_users.first().delete()&lt;/code&gt; 이런식으로 delete를 하게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;user.following_users.first()&lt;/code&gt;명령이 User object를 불러오기 때문에 user를 삭제 하게 된다. 왜냐하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;following_users&lt;/code&gt;가 User테이블에 정의된 field이기 때문이다.&lt;/p&gt;

&lt;p&gt;관계를 삭제하기 위해서는 m2m으로 연결괸 intermediate테이블의 필드를 불러와야 한다. 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;user.following_user_relations.first().delete()&lt;/code&gt;와 같은 방식으로 언팔로우 기능을 만들어 낼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User password 변경과 관련된 참고 자료&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/38845051/how-to-update-user-password-in-django-rest-framework&lt;/p&gt;

&lt;h2 id=&quot;12-8-금요일&quot;&gt;12-8 금요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;이미지파일 변경시 기존에 있던 사진 삭제하는 방법 관련 유용한 답변&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/16041232/django-delete-filefield&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이미지파일 용량제한 걸어둘 수 있는 방법에 관한 유용한 답변&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/38842053/how-to-check-the-file-size-limit-in-django&lt;/p&gt;

&lt;p&gt;https://www.google.co.kr/search?newwindow=1&amp;amp;ei=s5UqWsq6D8r_8QXpoIzgAw&amp;amp;q=django+size+image&amp;amp;oq=django+_size&amp;amp;gs_l=psy-ab.3.4.0i19k1l2j0i30i19k1l6j0i8i30i19k1l2.285284.296298.0.302801.15.13.2.0.0.0.261.1619.0j8j1.9.0….0…1c.1j4.64.psy-ab..5.8.1281…0j0i67k1j0i13i30k1j0i13k1.0.3YSiz1jgxvU&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오늘 할 일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;password 변경하는거까지 만들고 api 작성, 배포 -&amp;gt; ** 테스트를 해봐야 하지만 거의 완성 **&lt;/li&gt;
  &lt;li&gt;팔로잉 팔로워 리스트 만들기&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;언팔기능을 기존 팔로잉 기능에 추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;프로필 url 구조 확정되면 프로필 기능 만들기
    &lt;ul&gt;
      &lt;li&gt;url 구조 확정되면 바로 만들기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;언팔기능 만들기
    &lt;ul&gt;
      &lt;li&gt;만들어진 url로 다시 요청을 하면 언팔을 하도록 할지 아니면 url 하나를 더 만들어서 언팔기능을 구현할지 상의 후 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;user 정보 수정 기능 만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;하면서 새로 알게된 점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;serializer에서 field validation을 사용했는데 validation을 통과하지 못했을 경우 return으로 serializer.VAlidationErrors를 돌려주면 필드에 오류내용이 들어간 체로 is_valid를 통과하여 해당 데이터가 아래와 같이 serializer.data에 담겨진다. return 으로 어떤 값을 돌려주게 되면 해당 필드에 그 내용이 그대로 전달된다.&lt;/p&gt;

&lt;p&gt;(아래는 return으로 했을 때의 response값)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;old_password&quot;: &quot;['잘못된 비밀번호 입니다.']&quot;,
    &quot;new_password&quot;: &quot;1111&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is_valid 를 통과하지 못하게 하고 관련 에러를 serializer.errors에 담아서 보내주기 위해서는 raise를 사용해야 한다. raise는 그야말로 에러를 띄워주는 그런 역할을 하는 것 같다.&lt;/p&gt;

&lt;p&gt;(아래는 raise로 했을 때의 response값)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;old_password&quot;: [
        &quot;잘못된 비밀번호 입니다.&quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-11-월요일&quot;&gt;12-11 월요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;오늘 할일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;following, user profile, password, api 새로 적은거 올리기&lt;/li&gt;
  &lt;li&gt;following/follower list api 문서 작성 -&amp;gt; user 정보를 몽땅 주는걸로 수정 한 내용 적용해서 작성&lt;/li&gt;
  &lt;li&gt;api 문서에 token 값 header에 넣는 정보 같이 적어주기&lt;/li&gt;
  &lt;li&gt;user가 작성한 post list&lt;/li&gt;
  &lt;li&gt;현재 접속한 user가 해당 포스트에 좋아요를 눌렀는지 아닌지 확인하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-12-화요일&quot;&gt;12-12 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;psot 테스트 중 기록&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;post delete update 에서
    &lt;ul&gt;
      &lt;li&gt;해당 post pk값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post reply create 에서
    &lt;ul&gt;
      &lt;li&gt;해당 post pk 값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post text api에서
    &lt;ul&gt;
      &lt;li&gt;해당 text pk값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post path api에서
    &lt;ul&gt;
      &lt;li&gt;해당 path pk값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post photo api에서
    &lt;ul&gt;
      &lt;li&gt;해당 photo pk값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;post like api에서
    &lt;ul&gt;
      &lt;li&gt;해당 post pk값이 없을 경우 500 서버에러&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;오늘 할일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user image profile default image 적용시키기&lt;/li&gt;
  &lt;li&gt;로그인 할 때 server error 나는 부분확인해서 처리하기 -&amp;gt; 수정완료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;default image를 설정하려고 했는데 s3를 함께 사용하는 상테에서 어떻게 해야하는지 잘 모르겠음
    &lt;ul&gt;
      &lt;li&gt;도움이 될 법한 url
        &lt;ul&gt;
          &lt;li&gt;모델에 메서드를 작성해서 파일사이즈와, url 설정을 건드리는 것
https://djangotricks.blogspot.kr/2013/12/how-to-store-your-media-files-in-amazon.html&lt;/li&gt;
          &lt;li&gt;access denied 에 대한 stackoverflow 의 답변
https://stackoverflow.com/questions/13167493/access-denied-error-with-amazon-s3&lt;/li&gt;
          &lt;li&gt;기본적으로 default 이미지 설정에 관련한 stackoverflow 의 답변
https://stackoverflow.com/questions/6351636/provide-a-default-profile-picture-if-ever-empty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-13-수요일&quot;&gt;12-13 수요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;오늘 할일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user image profile default image 적용시키기
    &lt;ul&gt;
      &lt;li&gt;트러블 슈팅
filefield, fieldfile, storage 를 확인해 보고 강사님 코드 이해하고 사용해보기
​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;image file 용량 제한 -&amp;gt; 완성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;에러코드를 추가하는 부분에 있어서 exception을 custom 하는 부분이 많아서 어려움이 있음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;알게 된것&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;장고 문서에서 확인한 것은 아니지만 stackoverflow 에서의 답변에서 유추해 보면&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;megabyte_limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filesize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;megabyte_limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Max file size is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sMB&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;megabyte_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;1024를 2번 곱한 값이 MB 단위가 되는것으로 보아 기본 debug에서 int로 표시된 값을 1바이트로 유추해 볼 수 있다.&lt;/p&gt;

    &lt;p&gt;(bit &amp;lt; byte &amp;lt; KB &amp;lt; MB &amp;lt;GB) 8bit = 1byte, 1024byte = 1KB, 나머지도 1024를 곱하면 단위가 올라간다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-19-화요일&quot;&gt;12-19 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;금일 이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user profile 관련
    &lt;ul&gt;
      &lt;li&gt;user가 작성한 post 목록 보여줄 때 post list 구조랑 똑같이 보여달라는 요청이 있었음 -&amp;gt; 행아웃 미팅 후 처리
author 정보만 빼고 나머지 정보는 post list 정보와 똑같이 보여주는 걸로 작업&lt;/li&gt;
      &lt;li&gt;다른사람이 자신의 user profile을 볼 수 있도록 설정 -&amp;gt; pk값으로 다른사람의 profile을 볼 수 있는 url을 하나더 만드는 방법으로 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;nginx upload 용량 설정 관련 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ebextentions&lt;/code&gt; 적용
잘 적용이 안되었는데 수정한 내용으로 다음 배포 때 잘 되나 다시 확인&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;강사님께 물어볼 사항&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;혹시 git merge시에 indent가 흩으러져 있는 경우가 있었는지&lt;/li&gt;
  &lt;li&gt;사진파일 용량 제한 관련해서 nginx 설정을 ebextentsions에&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;금일 작업내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;nginx 용량제한 관련 수정 및 배포&lt;/li&gt;
  &lt;li&gt;token 확인하는 url 기능 api 문서 작성&lt;/li&gt;
  &lt;li&gt;userprofile 에서 author를 제외한 나머지 정보를 post list와 같은 구조로 보여주기&lt;/li&gt;
  &lt;li&gt;user profile update 오류 해결, 및 profile update, password update, following api 에러 response refactoring&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-20-수요일&quot;&gt;12-20 수요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;금일 작업내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;다른 사람의 userprofile 정보도 볼 수 있도록 url 추가 및 api 문서 작성 -&amp;gt; userprofile api 문서 update 요청 해야함
-&amp;gt; 완료&lt;/li&gt;
  &lt;li&gt;user profile 에서 response정보중 posts 부분을 post list와 완전하게 같게 만들어서 적용, api 문서 업데이트 -&amp;gt; response 정보를 post list랑 완전히 똑같이 받을 수 있도록 수정함
-&amp;gt; 완료&lt;/li&gt;
  &lt;li&gt;like psot api의 response 관련 수정요청 -&amp;gt; 내가 수정하고 변경내용 강복이한테 메시지 남겨놓음
-&amp;gt; 완료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user following 정보를 어떤식으로 보여줘야 할 지 앞쪽과 협의후에 진행해야 함&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-21-목요일&quot;&gt;12-21 목요일&lt;/h2&gt;

&lt;p&gt;금일 작업내용&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;배포작업
    &lt;ul&gt;
      &lt;li&gt;바뀐 내용
        &lt;ol&gt;
          &lt;li&gt;text, photo, path 에서 response시에 보여주는 데이터가 좀 달라짐&lt;/li&gt;
          &lt;li&gt;post like에서 좋아요 누른 user도 다 보여주는 형태로 바뀜&lt;/li&gt;
          &lt;li&gt;다른 사람의 userprofile 정보도 볼 수 있도록 url 추가&lt;/li&gt;
          &lt;li&gt;user profile 에서 response정보중 posts 부분을 post list와 완전하게 같게 만들어서 적용&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12-27-수요일&quot;&gt;12-27 수요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;회의&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user profile 쪽 post 의 순서를 최신작성 글이 가장 위에 올라갈 수 있도록 -&amp;gt; order&lt;/li&gt;
  &lt;li&gt;user profile 쪽 post pagination 알아보기 -&amp;gt; 보류하고 순서만 수정&lt;/li&gt;
  &lt;li&gt;user profile 쪽 img_profile 에 default image가 나올 수 있도록&lt;/li&gt;
  &lt;li&gt;좋아요에 푸시알람 주기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;꿀팁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mindnode&lt;/code&gt; 라는 마인드맵을 그려주는 프로그램이 있다.&lt;/p&gt;

&lt;p&gt;대체제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;FreeMind&lt;/code&gt;라는 프로그램이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;금일 작업내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user profile post의 순서를 최신작성 들이 위에 올라갈 수 있도록 ordering&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;12--28-목요일&quot;&gt;12- 28 목요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;배포전 변경사항 정리&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;post 에서 title max_length 수정 (30 -&amp;gt; 60)&lt;/li&gt;
  &lt;li&gt;created_at &lt;code class=&quot;highlighter-rouge&quot;&gt;2017-12-12T13:15:32.909751+09:00&lt;/code&gt;에서 -&amp;gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;17-12-12-24:00&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;post/postcontent/postreply api 에서 delete시 respone 오는 걸로 추가&lt;/li&gt;
  &lt;li&gt;post text 에 type 추가&lt;/li&gt;
  &lt;li&gt;user profile 쪽에 post list랑 liked posts를 최신순으로 정렬&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;배포시 ebextensions에 nginx 관련 설정을 해줬는데 강사님께 받은 소스와 , 스택오버플로우에서 알아낸 소스 둘다 502 bad gateway 에러를 뿜었다. 관련 error log 는 다음과 같다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017/12/28 11:25:53 [emerg] 28017#0: &quot;user&quot; directive is not allowed here in /etc/nginx/sites-enabled/elasticbeanstalk-nginx-docker-proxy.conf:1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 폴더에 들어가서 elasticbeanstalk-nginx-docker-proxy.conf를 직접 삭제하는 조치를 취해봤지만 같은 에러 반복 및 nginx가 잘 돌아가는지도 확인이 안되었다.&lt;/p&gt;

&lt;p&gt;강사님께 받은 소스&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user                    nginx;
error_log               /var/log/nginx/error.log warn;
pid                     /var/run/nginx.pid;
worker_processes        auto;
worker_rlimit_nofile    33193;

events {
   worker_connections  1024;
}

http {
   include       /etc/nginx/mime.types;
   default_type  application/octet-stream;

   log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                     '$status $body_bytes_sent &quot;$http_referer&quot; '
                     '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

   include       conf.d/*.conf;

   map $http_upgrade $connection_upgrade {
       default     &quot;upgrade&quot;;
   }

   server {
       listen        80 default_server;
       access_log    /var/log/nginx/access.log main;

       client_header_timeout 60;
       client_body_timeout   60;
       keepalive_timeout     60;
       gzip                  off;
       gzip_comp_level       4;
       gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

       # Include the Elastic Beanstalk generated locations
       include conf.d/elasticbeanstalk/*.conf;
   }

   client_max_body_size 50M;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(스택오버플로우에서 찾은 소스)[https://stackoverflow.com/questions/18908426/increasing-client-max-body-size-in-nginx-conf-on-aws-elastic-beanstalk]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;files:
    &quot;/etc/nginx/conf.d/proxy.conf&quot; :
        mode: &quot;000755&quot;
        owner: root
        group: root
        content: |
           client_max_body_size 5M;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-20-토요일&quot;&gt;12-20 토요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;작업내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;following 에서 response data가 int 형식으로 되도록 수정&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-2-화요일&quot;&gt;1-2 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;해야할 일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;다른 사람 user profile 확인하는 url 에서 요청한 사람의 follow following 숫자를 가져오는 문제 확인하고 수정
-&amp;gt; 수정완료&lt;/li&gt;
  &lt;li&gt;user profile에 img_profile 부분 url로 전달할 수 있도록 수정
-&amp;gt; 수정완료&lt;/li&gt;
  &lt;li&gt;변경사항 확인하고 배포후 공지
-&amp;gt; dhksfy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;배포내용 정리&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;다른 사람 user profile 확인하는 url 에서 요청한 사람의 follow following 숫자를 가져오는 문제
-&amp;gt; 요청한 url의 pk값을 기준으로 follow following 숫자를 가져오도록 수정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;user profile에 img_profile 부분 url로 전달할 수 있도록 수정
   -&amp;gt; 수정완료&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;following의 url 에서 response 의 value 값이 integer로 올 수 있도록 수정&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;from_user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to_user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post reply create 요청시 응답 다음과 같이 올 수 있또록 수정&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zoozoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shz@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img_profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/media/user/5.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e9f446816d19ba6a356024ed2c83eba1ebc49ed6&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testestes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-01-02 15:06&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;post detail에서 path는 0번째 순서를 가지고 text, photo 는 순서대로 정렬되게끔 수정(다음은 post detail의 예시)&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post_content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;content_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;행아웃&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이미지를 보내고 두번째 이미지를 보내면 첫번째 이미지가 두번째 이미지로 변경됨&lt;/p&gt;

&lt;h1 id=&quot;01-03-수요일&quot;&gt;01-03 수요일&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;elb get 요청 관련 (health check)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;nginx access.log 에 아래와 같이 health check 요청이 몇초 간격으로 요청됨&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;172.31.18.201 - - [03/Jan/2018:03:36:25 +0000] &quot;GET /post/542/ HTTP/1.1&quot; 200 19 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:36:26 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.18.201 - - [03/Jan/2018:03:36:30 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.12.62 - - [03/Jan/2018:03:36:41 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.18.201 - - [03/Jan/2018:03:36:45 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.12.62 - - [03/Jan/2018:03:36:56 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.18.201 - - [03/Jan/2018:03:37:00 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:11 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.18.201 - - [03/Jan/2018:03:37:15 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:26 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.18.201 - - [03/Jan/2018:03:37:30 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/1/list/ HTTP/1.1&quot; 200 985 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/2/list/ HTTP/1.1&quot; 200 1228 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/4/list/ HTTP/1.1&quot; 200 1072 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/3/list/ HTTP/1.1&quot; 200 1054 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/5/list/ HTTP/1.1&quot; 200 966 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:37 +0000] &quot;GET /post/6/list/ HTTP/1.1&quot; 200 1075 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:39 +0000] &quot;GET /member/userprofile/ HTTP/1.1&quot; 200 2841 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:39 +0000] &quot;GET /member/userprofile/ HTTP/1.1&quot; 200 2841 &quot;-&quot; &quot;Explog/1.0 (Explog; build:1; iOS 11.2.0) Alamofire/4.6.0&quot;
172.31.12.62 - - [03/Jan/2018:03:37:41 +0000] &quot;GET / HTTP/1.1&quot; 400 37 &quot;-&quot; &quot;ELB-HealthChecker/2.0&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;조사후 아래와 같은 검색결과를 얻음&lt;/p&gt;

&lt;p&gt;https://github.com/getsentry/sentry/issues/2590 -&amp;gt; nginx 설정&lt;/p&gt;

&lt;p&gt;https://serverfault.com/questions/518220/nginx-solution-for-aws-amazon-elb-health-checks-return-200-without-if -&amp;gt; nginx 설정&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;배포내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user profile 에서 response 데이터 중에 user가 작성한 post list, 좋아요 누른 post list 에 각 post img의 default img를 보여줄 수 있게 수정&lt;/li&gt;
  &lt;li&gt;요청하는 user가 follow 하는 사람들의 post list를 보여주는 url 추가 &lt;code class=&quot;highlighter-rouge&quot;&gt;/post/follow/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;push notification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앱쪽에서 준비해야할 사항들&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;디바이스에 해당하는 토큰&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-5-금요일&quot;&gt;1-5 금요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;push notification 관련 기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;패키지의 send_message 메소드를 사용할 때 어떤 key 값을 사용할 수 있는지 내부 함수를 뜯어 봤는데 다음과 같이 확인할 수 있었고 실험 결과 다음 함수의 attribute를 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_apns_prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;content_available&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_loc_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutable_content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_loc_key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;apns2_alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apns2_payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PayloadAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body_localized_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body_localized_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_localized_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_loc_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;apns2_alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apns2_payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;apns2_alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutable_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;url_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;test로 send_message 사용했을 때 최종적으로 원하던 구조&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [46]: test.send_message(message={&quot;title&quot;:&quot;Game Request&quot;, &quot;body&quot;: &quot;Bob wants to play poker&quot;}, sound=&quot;chime.aiff&quot;, extra={&quot;user&quot; : &quot;user.img_profile&quot;} , badge=1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;푸시는 이미지&lt;/p&gt;

&lt;p&gt;디바이스토큰 세팅하는 시점 로그인, 회원가입할 때&lt;/p&gt;

&lt;p&gt;알람 나가는 시점 좋아요&lt;/p&gt;

&lt;h2 id=&quot;1-6-토요일&quot;&gt;1-6 토요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;device token을 저장할 경우 잘 저장되었다는 response, 혹은 잘 저장되지 않았다는 response를 돌려줘야 할지… -&amp;gt; 만약에 돌려준다고 하면 기존의 response 에서 하나가 추가되기 때문에 미리 같이 이야기를 해야만 한다.
여러가지 선택사항중에 가장 간단한 방법중의 하나는 token 정보만 넘겨주고 (device-token 을 key값으로 하고 token 값을 value로 해서 데이터를 넘겨준다) response는 지금과 같이 그대로 받는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;민준님께 받은 토큰 값&lt;code class=&quot;highlighter-rouge&quot;&gt;19bfe0b5d0363186cbf5482225d341701c7f53f1ef67186537e6e88a1d4e7ea7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;금일 작업&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ios 기기의 device token을 받아서 저장 할 수 있는 기능 추가
-&amp;gt; login, sign up 시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;device-token&lt;/code&gt;이라는 key값을 추가하면 해당 key값을 활용해 해당 user와 관련된 APNSdevice 객체를 저장한다. 현재로써는 각 user는 하나의 device token만 가짐&lt;/li&gt;
  &lt;li&gt;좋아요 버튼 누르면 날아가는 로직까지 만들어 놓음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;남은 작업&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pem 파일을 비밀번호 없어도 사용할 수 있게끔 만들어야 함
(shell 에서 비밀번호 입력해야 할 경우 python에서 어떻게 처리할 수 있는지도 한번 알아보면 좋을 것 같다)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-7-일요일&quot;&gt;1-7 일요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;기록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;push notification 작업을 하는중 pem 파일의 비밀번호 제거 하는 명령을 한 뒤에  다음과 같은 에러 발생&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSLError: [SSL] PEM lib (_ssl.c:3281)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 내용은 검색해도 잘 안나오고 python 에서 혹시 자동으로 비밀번호를 전달하게 해서 문제를 해결 하려 하다가 다음 stackoverflow 답변 발견&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/10069351/enter-pem-pass-phrase-just-once#&lt;/p&gt;

&lt;p&gt;위의 답변에 나온 방법으로 문제 해결함&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;push notification에 대한 정보 기록이 필요함 -&amp;gt; 좋아요 누른사람 정보, 어떤포스트 인지&lt;/li&gt;
  &lt;li&gt;badge정보를 저장할 공간이 필요함 badge 를 저장하고 해당정보를 보내줘야함&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-8-월요일&quot;&gt;1-8 월요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;금일 작업&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;badge 정보를 쌓아나갈 수 있는 model과 model method만들고 api에 적용
-&amp;gt; 완료&lt;/li&gt;
  &lt;li&gt;badge 정보 0으로 reset 할 수 있는 api 완성
-&amp;gt; 완료&lt;/li&gt;
  &lt;li&gt;내 post에 좋아요 누른사람들의 리스트를 받을 수 있는 api
-&amp;gt; 완료&lt;/li&gt;
  &lt;li&gt;변경된 내용 배포하고 api문서 작성하기
update 할 api 문서 : login, sign up, reset-badge, push list, liked post(올바르지 않은 토큰 넣었을 때 error 냄)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;변경사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;login과 sign up 시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;device-token&lt;/code&gt;이라는 key값을 추가하면 apns device 객체를 생성하도록 함 (response data는 기존과 같다)&lt;/li&gt;
  &lt;li&gt;올바른 device token이 입력되어 있다면 다른 누군가가 내가 작성한 post에 좋아요 버튼을 눌렀을 경우 push notification이 날라오고, badge값은 좋아요가 눌러질 때마다 1씩 추가되도록 setting 되어 있음
 또한 push notifications에 서버에 저장되어 있는 badge값이 포함되어 날라감&lt;/li&gt;
  &lt;li&gt;user의 badge값을 0으로 초기화 할 수 있는 url 추가. &lt;code class=&quot;highlighter-rouge&quot;&gt;/push/reset-badge/&lt;/code&gt;라는 url로 로그인한 user가 get 요청을 보내면 자신의 badge값을 0으로 초기화함&lt;/li&gt;
  &lt;li&gt;자신의 post에 좋아요 누른 목록 보여주는 url 추가. &lt;code class=&quot;highlighter-rouge&quot;&gt;/push/list/&lt;/code&gt;라는 url로 로그인한 user가 get 요청을 보내면 자신이 작성한 post에 좋아요를 누른 정보가 최신정보 순으로 정렬되어 나타남. pagination은 6&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;현재로선 push notification은 ios 기준으로만 되어 있습니다.&lt;/p&gt;

&lt;p&gt;api 문서는 작성중입니다.&lt;/p&gt;

&lt;h2 id=&quot;1-9-화요일&quot;&gt;1-9 화요일&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;작업내용&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;배포후 발생한 문제 해결
device token은 unique true 라서 같은 디바이스 토큰이 들어가지 못함
-&amp;gt; 중복된 device token값을 입력하게되면 아래와 같은 오류를 발생하게 만듦&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;device-token&quot;: &quot;중복된 토큰값&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;프로젝트 마무리 해야할 것들&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;elb health check 관련 해결&lt;/li&gt;
  &lt;li&gt;nginx 사진용량 사이즈 조정&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;이슈사항&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;뱃지 넘버를 세팅할 수 있는 api  &lt;code class=&quot;highlighter-rouge&quot;&gt;/push/set-badge/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;-&amp;gt;
인증된 user가 patch요청,
key 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;badge&lt;/code&gt; value값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;integer&lt;/code&gt; 보내면 요청한 user의 badge정보 세팅되고 아래와 같이 response&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;badge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디바이스토큰 세팅 할 수 있는 api &lt;code class=&quot;highlighter-rouge&quot;&gt;/push/device-token/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;-&amp;gt;
인증된 user가 patch요청,
key 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;device-token&lt;/code&gt; value값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;디바이스 토큰값&lt;/code&gt; 보내면 요청한 user의 device token값이 보낸 요청으로 세팅되고 아래와 같이 response&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;registration_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qwer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;registration_id&lt;/code&gt; 에 해당되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;qwer&lt;/code&gt;이 토큰값&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;login, sign up 시에 response 로 device token 값 response로 보여주기
apnsdevice_set 안에 있는 registrations_id 의 value값이 토큰&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zoozoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shz@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img_profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/media/user/5.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e9f446816d19ba6a356024ed2c83eba1ebc49ed6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apnsdevice_set&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;registration_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1310df61f0d3b1fc94324600ae5ebf75be6a859278b1e3ebe1110111dae86d4f&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html">나의 여행기 기록 SNS EXPLOG를 개발하며 기록해 놓은 자료입니다.</summary></entry><entry><title type="html">NGINX</title><link href="https://zooozoo.github.io/records/2018-03-23-NGINX/" rel="alternate" type="text/html" title="NGINX" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/NGINX</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-03-23-NGINX/">&lt;h2 id=&quot;생활코딩-nginx강의&quot;&gt;생활코딩 Nginx강의&lt;/h2&gt;

&lt;p&gt;아래의 내용은 egoing님이 강의하시는 opentutorials의 NGINX강의에서 발췌한 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opentutorials.org/module/384/3462&quot;&gt;강의 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1강-nginx-소개&quot;&gt;1강 Nginx 소개&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹, 클라이언트와 서버간의 관계에 대한 설명&lt;/li&gt;
  &lt;li&gt;HTTP에 대한 소개&lt;/li&gt;
  &lt;li&gt;Web server -&amp;gt; HTTP라고도 할 수 있다.&lt;/li&gt;
  &lt;li&gt;웹서버의 역사
    &lt;ul&gt;
      &lt;li&gt;아파치의 압도적인 점유율&lt;/li&gt;
      &lt;li&gt;그러나 최근들어서 점점 아파치의 점유율을 따라오고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginx는 차세대 웹서버 - 더 적은 자원으로 더 빠르게 데이터를 서비스할 수 있는 경량화된 웹서버&lt;/li&gt;
  &lt;li&gt;Document Root : &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;설정파일: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conf.d&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;default.conf&lt;/code&gt;에는 nginx의 기본 설정이 있다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conf.d&lt;/code&gt;는 이름이 달라질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그파일: &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/nginx/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2강-nginx-컴파일&quot;&gt;2강 Nginx 컴파일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일하는 방법, 의존성 등의 문제가있는 난이도가 있음&lt;/li&gt;
  &lt;li&gt;Nginx 모듈을 컴파일을 통해서만 설치할 수 있기 때문에 알아두면 좋다&lt;/li&gt;
  &lt;li&gt;Nginx는 세가지 버전이 있다.
    &lt;ul&gt;
      &lt;li&gt;안전버전 : 실제 배포할 때&lt;/li&gt;
      &lt;li&gt;개발버전: 개발할 때 / 버그가 발생할 수 있다.&lt;/li&gt;
      &lt;li&gt;레거시버전: 예전버전의 Nginx&lt;/li&gt;
      &lt;li&gt;안전버전의 설치가 권장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginx는 마스터 프로세스(Master Process)와 작업자 프로세스(Worker Process)를 가지고 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux | grep nginx&lt;/code&gt;를 실행해보면 아래와 같은 프로세스가 떠있을 것이다.&lt;/li&gt;
      &lt;li&gt;마스터 프로세스는 루트 계정으로 실행되면서 80, 443 포트의 소켓과의 통신을 담당한다.&lt;/li&gt;
      &lt;li&gt;작업자 프로세스는 실제로 데이터를 처리하는 프로세스라고 할 수 있는데 이 프로세스를 핸들링할 사용자를 만들어야 한다. 일반적으로 웹서버의 워커 유저는 www-data를 사용한다. www-data를 만드는 법은 아래와 같다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useradd --shell /usr/sbin/nologin www-data&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3강-php-fpm-mysql-1&quot;&gt;3강 PHP-FPM-MYSQL 1&lt;/h2&gt;

&lt;h3 id=&quot;cgi&quot;&gt;CGI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CGI는 Common Gateway Interface의 약자로 웹서버와 외부 프로그램을 연결해주는 표준화된 프로토콜이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/384/1398.gif&quot; alt=&quot;cgi based server&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fastcgi&quot;&gt;FastCGI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CGI 는 하나의 요청(Request)에 하나의 프로세스를 생성한다. 이것은 프로세스를 생성하고 삭제하는 과정에서 많은 부하가 발생한다. 당연히 느리다. 이를 개선하기 위해서 등장한 것이 FastCGI이다. FastCGI는 요청이 있을 때마다 프로세스가 만들어지는 것이 아니라 만들어진 프로세스가 계속해서 새로운 요청들을 처리한다. 덕분에 프로세스를 생성하고 제거하는데 들어가는 부하가 줄어든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/384/1397.gif&quot; alt=&quot;cgi based server&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3강-php-fpm-mysql-2&quot;&gt;3강 PHP-FPM-MYSQL 2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FPM, 과 MYSQL을 설치를 한 후에는 Nginx를 설정해 줘야 하는데 설정파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf.d/default.conf&lt;/code&gt; 이거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/default&lt;/code&gt;에 있다.&lt;/li&gt;
  &lt;li&gt;socker - fastcgi_pass는 php-fpm과 NGINX를 연결하기 위한 인터페이스를 지정하는 것.&lt;/li&gt;
  &lt;li&gt;Upstream Module - Upstream Module는 NGINX를 일종의 부하분배장치(Load Balancer)로 이용할 수 있게 해주는 NGINX의 모듈이다. 자세한 내용은 Upstream Module를 참고한다. &lt;a href=&quot;http://opentutorials.org/module/384/4328&quot;&gt;Upstream Module 바로가기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4강-php-fpm-mysql-3&quot;&gt;4강 PHP-FPM-MYSQL 3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PHP를 Nginx와 독립된 별도의 서버에 설치하여 연결하는 것을 설명&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5강-nginx-환경설정&quot;&gt;5강 NGINX 환경설정&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 설정파일은 conf 디렉토리 아래에 위치하고, 설치 바업에 따라서 설정파일의 위치가 다를 수 있다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;컴파일을 통해 설치할 경우 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/nginx/conf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;을 이용해서 우분투에 설치할 경우 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정파일 위치를 찾는 명령어
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find / -name nginx.conf&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정파일의 역할&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;nginx.conf : 메인 설정 파일.&lt;/li&gt;
      &lt;li&gt;fcgi.conf : FastCGI 환경설정 파일&lt;/li&gt;
      &lt;li&gt;sites-enabled : 활성화된 사이트들의 설정 파일들이 위치. 아파치에서는 Virtual host의 설정에 해당한다. 기본적으로 존재하지 않을수도 있다. 이 디렉토리를 직접 만들어서 사용하는 방법은 &lt;a href=&quot;http://opentutorials.org/module/384/4529&quot;&gt;가상 호스팅&lt;/a&gt;편에서 알아본다.&lt;/li&gt;
      &lt;li&gt;sites-available : 비활성화된 사이트들의 설정 파일들이 위치&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래의 Nginx 메인 환경설정 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;의 내용을 파해치며 Nginx의 환경설정을 이해해 나가보자&lt;/p&gt;

    &lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;worker_processes&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;mime.types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h3 id=&quot;core-모듈-설정&quot;&gt;Core 모듈 설정&lt;/h3&gt;

    &lt;p&gt;위의 예의 work_processes와 같은 지시자 설정 파일 최상단에 위치하면서 nginx의 기본적인 동작 방식을 정의한다. 여기서 사용되는 지시어들은 다른 곳에서 사용되지 않는다. &lt;a href=&quot;http://opentutorials.org/module/384/4533&quot;&gt;코어모듈 지시어 사전&lt;/a&gt;을 참고하자.&lt;/p&gt;

    &lt;h3 id=&quot;http-블록&quot;&gt;http 블록&lt;/h3&gt;

    &lt;p&gt;http 블록은 이후에 소개할 server, location의 루트 블록이라고 할 수 있고, 여기서 설정된 값을 하위 블록들은 상속한다. http 블록은 여러개를 사용할 수 있지만 관리상의 이슈로 한번만 사용하는 것을 권장한다.&lt;/p&gt;

    &lt;p&gt;http, server, location 블록은 계층구조를 가지고 있다. 많은 지시어가 각각의 블록에서 동시에 사용할 수 있는데, http의 내용은 server의 기본값이 되고, server의 지시어는 location의 기본값이 된다. 그리고 하위의 블록에서 선언된 지시어는 상위의 선언을 무시하고 적용된다.&lt;/p&gt;

    &lt;h3 id=&quot;server-블록&quot;&gt;server 블록&lt;/h3&gt;

    &lt;p&gt;server 블록은 하나의 웹사이트를 선언하는데 사용된다. 가상 호스팅(Virtual Host)의 개념이다. 예를들어 하나의 서버로 http://opentutorials.org 과 http://egoing.net 을 동시에 운영하고 싶은 경우 사용할 수 있는 방법이다. 가상 호스팅에 대한 자세한 내용은 &lt;a href=&quot;http://opentutorials.org/module/384/4529&quot;&gt;가상 호스팅 수업&lt;/a&gt;을 참고하자.&lt;/p&gt;

    &lt;h3 id=&quot;location-블록&quot;&gt;location 블록&lt;/h3&gt;

    &lt;p&gt;location 블록은 server 블록 안에 등장하면서 특정 URL을 처리하는 방법을 정의한다. 이를테면 http://opentutorials.org/course/1 과 http://opentutorials.org/module/1 로 접근하는 요청을 다르게 처리하고 싶을 때 사용한다.&lt;/p&gt;

    &lt;h3 id=&quot;events-블록&quot;&gt;events 블록&lt;/h3&gt;

    &lt;p&gt;이벤트 블록은 주로 네트워크의 동작방법과 관련된 설정값을 가진다. 이벤트 블록의 지시어들은 이벤트 블록에서만 사용할 수 있고, http, server, location와는 상속관계를 갖지 않는다. 이벤트 모듈 지시어에 대한 설명은 &lt;a href=&quot;http://opentutorials.org/module/384/4534&quot;&gt;이벤트 모듈 지시어 사전&lt;/a&gt;을 참고한다.&lt;/p&gt;

    &lt;h3 id=&quot;설정-파일의-반영&quot;&gt;설정 파일의 반영&lt;/h3&gt;

    &lt;p&gt;설정 파일의 내용을 변경한 후에는 이를 NGINX에 반영해야 하는데 아래와 같이 reload 명령을 이용한다. restart를 이용해도 되지만 권장되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;forward-proxy와-reverse-proxy의-차이&quot;&gt;Forward proxy와 Reverse proxy의 차이&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lesstif.com/pages/viewpage.action?pageId=21430345&quot;&gt;https://www.lesstif.com/pages/viewpage.action?pageId=21430345&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;vps란&quot;&gt;VPS란?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://library.gabia.com/contents/infrahosting/3594&quot;&gt;http://library.gabia.com/contents/infrahosting/3594&lt;/a&gt;&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><category term="NGINX강의록" /><summary type="html">NGINX를 공부하며 필요한 내용을 기록해 두었습니다.</summary></entry><entry><title type="html">\‘하루 3분 네트워크 교실\’ 리뷰</title><link href="https://zooozoo.github.io/posts/2018-03-18-%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0/" rel="alternate" type="text/html" title="\'하루 3분 네트워크 교실\' 리뷰" /><published>2018-03-18T00:00:00+09:00</published><updated>2018-03-18T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-18-%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0/">&lt;p&gt;&lt;img src=&quot;https://zooozoo.github.io/assets/images/PreviewResize.jpeg&quot; alt=&quot;책&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OKKY에서 였나 비전공 신입 개발자에게 필요한 역량 1등으로 꼽았던게 네트워크에 관한 지식이었다. 사실 학원에서 공부할 때에 통 통신 원리에 대한 근원적인 궁금증은 있었지만, 그 궁금증을 해결해 줄 지식이 네트워크 공부에 있는지는 잘 모르고 있었다. 학원을 마치고 컴퓨터공학에 대해서 공부를 맛보기라도 해보자는 마음으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;커니핸 교수의 Hello Digital World&lt;/code&gt;라는 책을 읽었고, 책을 다 읽고 난 후에는 통신과 관련된 책도 꼭 읽어봐야겠다는 마음을 가지게 되었다. 누구에게 강의를 들을 수 있는 것이 아니었기 때문에 어떤책을 골라야 할 지 막막함이 있었는데 학원 강사님게서 추천해주신 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP완벽 가이드&lt;/code&gt;라는 책을 조금 들쳐봤을 때에는 도저히 바로 시작하면 챕터 1에서 나가떨어질 것만 같아서 다른 책을 찾는 와중에 리뷰의 주인공인 &lt;code class=&quot;highlighter-rouge&quot;&gt;하루 3분 네트워크 교실&lt;/code&gt;이라는 책을 발견하게 되었다.&lt;/p&gt;

&lt;p&gt;사실 유명한 책인지는 잘 모르겠다. 그냥 잠깐 봤는데 쉽게 설명하는 것 같아서 어려워도 그냥 여러번 읽다보면 잘 이해가 가겠지 싶어 집에 사왔다.&lt;/p&gt;

&lt;p&gt;결론부터 이야기 하자면 정말 좋은 책인 것 같다. 각 챕터의 연결이 잘 이루어져있고, 대화형식이라 지루하지 않다. 또한 중간중간 잊을 것 같은 내용들을 반복적으로 다시 알려주기 때문에 한번 읽으면서도 잘 이해할 수 있었다(물론난 다시 읽으며 복습했지만). 글로 잘 이해되지 않는 부분은 많은 도표로 쉽게 설명하는 부분도 이 책의 장점이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;책의 내용은 네트워크가 무엇인지에 대한 가장 기초적인 내용부터 시작해서  &lt;code class=&quot;highlighter-rouge&quot;&gt;OSI참조모델&lt;/code&gt;을 기반으로하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP/IP프로토콜군&lt;/code&gt;의 4계층 모델을 설명한다. 컴퓨터 네트워크의 기초와  &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP/IP&lt;/code&gt;기초를 설명한 책이라고 할 수 있겠다.&lt;/p&gt;

&lt;p&gt;나처럼 비전공자 이면서 웹프로그래밍 공부를 하는 와중에 네트워크 기초 부분에 대한 지식이 필요한데 너무 어렵게만 느껴져서 쉽게 다가가지 못하는 사람이 있다면 나는 이 책을 적극 추천할 생각이다.&lt;/p&gt;

&lt;p&gt;저자가 일본인인데 저자가 쓴 다른 책들도 있어서 혹시 번역된게 있으면 사서 볼려고 했는데 없어서 아쉬웠다. 이 책을 읽은 후에는 같은 출판사에서 쓴 &lt;code class=&quot;highlighter-rouge&quot;&gt;그림으로 배우는 HTTP Network Basic&lt;/code&gt;도 사서 읽어봤는데 http를 최대한 쉽게 설명하려고 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;하루 3분 네트워크 교실&lt;/code&gt;을 읽기 전에 먼저 읽었다면 조금 답답하게 읽었을 것 같다는 생각을 했었다.&lt;/p&gt;

&lt;p&gt;저자의 다른 책도 번역되서 나왔으면 좋겠다는 바람과 함께 리뷰를 마친다.&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="책리뷰" /><summary type="html">OKKY에서 였나 비전공 신입 개발자에게 필요한 역량 1등으로 꼽았던게 네트워크에 관한 지식이었다. 사실 학원에서 공부할 때에 통 통신 원리에 대한 근원적인 궁금증은 있었지만, 그 궁금증을 해결해 줄 지식이 네트워크 공부에 있는지는 잘 모르고 있었다.</summary></entry><entry><title type="html">Project-HP</title><link href="https://zooozoo.github.io/portfolio/project-hp/" rel="alternate" type="text/html" title="Project-HP" /><published>2018-03-08T00:00:00+09:00</published><updated>2018-03-08T00:00:00+09:00</updated><id>https://zooozoo.github.io/portfolio/project-hp</id><content type="html" xml:base="https://zooozoo.github.io/portfolio/project-hp/">&lt;h2 id=&quot;custom-homepage-project-wwwnews-collectercom&quot;&gt;Custom Homepage Project &lt;a href=&quot;https://www.news-collecter.com/&quot;&gt;www.news-collecter.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;홈페이지로 쓰고자 직접 제작한 웹사이트 입니다.
주기적으로 포탈과 언론사의 메인 기사 제목을 10개정도씩 가져와 한 화면에 보여주는 사이트입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://zooozoo.github.io/assets/images/news-collecter-resize-compres.gif&quot; alt=&quot;프로젝트 작동영상 gif&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트명 : News-Collecter&lt;/li&gt;
  &lt;li&gt;기간 : 2018.03.09 – 2018.05.11&lt;/li&gt;
  &lt;li&gt;내용 :
수많은 언론사가 뉴스를 만들어 냅니다. 뉴스의 소비자들은 각각의 언론사의 뉴스 취사선택에 따라 영향을 받기 마련입니다. 예를들면 언론사는 어떤 사항을 뉴스거리로 보도할 것인지, 혹은 같은 사항이라도 어떤 단어를 선택해서 제목을 뽑을 것인지에 따라 뉴스 소비자들은 해당 사항에 대해서 긍정 혹은 부정적인 영향을 받게 됩니다. 정보의 호수속에서 균형잡힌 시각을 얻기위해서는 여러 언론사들의 헤드라인 선정이나, 사안에 대한 논조 등을 비교해 가면서 볼 수 있어야 하는데 기존 포탈에서는 뉴스를 보여주는 것이 목적이 아닌지라 이러한 역할을 하기에는 한계점이 있다고 생각했습니다. 그래서 광고나 검색을 위한 포탈이 아닌 한눈에 여러 언론사의 헤드라인을 모아서 볼 수 있는 일종의 뉴스 포탈을 통해 특정 사안에 대한 각 언론사별 논조를 비교하거나, 뉴스의 취사선택에서 어떤 차이점을 보이는지 확인하며 나만의 생각을 가질 수 있는데 도움을주는 페이지를 만들고자 했습니다.&lt;/li&gt;
  &lt;li&gt;사용기술 :
    &lt;ul&gt;
      &lt;li&gt;Django, uwsgi, nginx를 사용해 웹서버를 구축했습니다.&lt;/li&gt;
      &lt;li&gt;Django Template, CSS와 Bootstrap을 활용해 웹 페이지를 구현했습니다.&lt;/li&gt;
      &lt;li&gt;request와 beautiful soup을 사용해서 언론과 포탈의 뉴스 타이틀을 가져왔습니다. 각 언론사
별로HTML구조가 다르기 때문에 언론사별 메소드를 구현하였고 bulk_create 쿼리를
활용하기 위해 class로 구현했습니다.&lt;/li&gt;
      &lt;li&gt;Celery와 AWS Simple Queue Service를 활용하여 지정한 시간 간격으로 메시지큐의 요청을
통해 각 언론사 뉴스타이틀을 가져오게끔 구성해 놓았습니다.&lt;/li&gt;
      &lt;li&gt;Supervisor를 활용해 배포된 상태에서 Nginx와 wsgi, Celery를 자동으로 백그라운드에서
실행시키도록 구성했습니다.&lt;/li&gt;
      &lt;li&gt;Docker와 AWS Elastic beanstalk을 활용해 배포작업을 진행하였습니다.&lt;/li&gt;
      &lt;li&gt;Route53을 활용해 도메인 이름을 부여하고 AWS의 Certificate Manager 서비스를 활용해
SSL인증서를 발급받고 적용했습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Github - &lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;https://github.com/zooozoo/homepage-project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트 도메인 &lt;a href=&quot;http://www.news-collecter.com&quot;&gt;http://www.news-collecter.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;진행사항 기록 &lt;a href=&quot;https://zooozoo.github.io/records/2018-03-23-PROJECT-NEWS-COLLECTER/&quot;&gt;https://zooozoo.github.io/records/2018-03-23-PROJECT-NEWS-COLLECTER/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Seok Hun Zoo</name></author><category term="portfolio" /><summary type="html">project portfolio</summary></entry><entry><title type="html">EXPLOG</title><link href="https://zooozoo.github.io/portfolio/explog/" rel="alternate" type="text/html" title="EXPLOG" /><published>2018-03-08T00:00:00+09:00</published><updated>2018-03-08T00:00:00+09:00</updated><id>https://zooozoo.github.io/portfolio/explog</id><content type="html" xml:base="https://zooozoo.github.io/portfolio/explog/">&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/n_dV5jrGEx4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트명 : Explog&lt;/li&gt;
  &lt;li&gt;기간 : 2017.11.27 – 2018.01.12&lt;/li&gt;
  &lt;li&gt;역할 : 배포 / User authentication / Push notification&lt;/li&gt;
  &lt;li&gt;내용 : 자신만의 여행을 기록하고 기록한 사진과 글을 다른 사람과 함께 공유하는 여행기SNS 애플리케이션 입니다. 아무 사진을 올리는 것 보다 자신의 이야기가 담긴 사진과 내용을 여러사람들과 공유할 수 있는 SNS를 만들고자 했습니다. 여행은 자신의 이야기를 가장 잘 담아낼 수 있다고 생각했고, 자신의 여행기를 담아 주변사람과 공유하고 다른 사람의 여행기를 참고할 수 있으면 좋겠다는 생각에 만들게 된 애플리케이션 입니다.&lt;/li&gt;
  &lt;li&gt;사용기술 :
    &lt;ul&gt;
      &lt;li&gt;django, nginx, uwsgi, supervisor를 활용해 서버를 구축했습니다.&lt;/li&gt;
      &lt;li&gt;안드로이드, IOS기기와 데이터를 주고받기 위해서 Django Restframework 를 사용해 rest API 를 구현했습니다.&lt;/li&gt;
      &lt;li&gt;Postgresql 을 이용해 모델을 구축했습니다. Django AbstractUser 모델을 활용해 User 모델을 구현했고,
post 모델과의 m2m 관게를 활용해서 ‘ 좋아요 ’ 기능과 ‘ 팔로우 ’ 기능을 만들었습니다. 배포과정에서는
AWS RDS 를 사용하여 데이터베이스를 구축했습니다.&lt;/li&gt;
      &lt;li&gt;Django-push-notifications 를 활용하여 push 알람 기능을 구축했습니다.&lt;/li&gt;
      &lt;li&gt;AWS Elasticbeanstalk 와 Docker 를 활용하여 배포했습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Github - &lt;a href=&quot;https://github.com/zooozoo/Team-project&quot;&gt;https://github.com/zooozoo/Team-project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;API(git book) - &lt;a href=&quot;https://gangbok119.gitbooks.io/explog-api/content/&quot;&gt;https://gangbok119.gitbooks.io/explog-api/content/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;작동 동영상 - &lt;a href=&quot;https://www.youtube.com/watch?v=n_dV5jrGEx4&amp;amp;t=31s&quot;&gt;https://www.youtube.com/watch?v=n_dV5jrGEx4&amp;amp;t=31s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;진행사항 기록 - &lt;a href=&quot;https://zooozoo.github.io/records/2018-03-23-PROJECT-EXPLOG/&quot;&gt;https://zooozoo.github.io/records/2018-03-23-PROJECT-EXPLOG/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Seok Hun Zoo</name></author><category term="portfolio" /><summary type="html">project portfolio</summary></entry><entry><title type="html">if __name__ == “__main__”: 의미</title><link href="https://zooozoo.github.io/posts/2018-03-03-if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8/" rel="alternate" type="text/html" title="if __name__ == &quot;__main__&quot;: 의미" /><published>2018-03-03T00:00:00+09:00</published><updated>2018-03-03T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-03-if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8/">&lt;h1 id=&quot;if-__name__--__main__-의미&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;: 의미&lt;/h1&gt;

&lt;p&gt;해당내용을 패스트캠퍼스 수업시간에 한번 들은적이 있는데 다시보면 헷갈리고 명확하게 개념을 이해하고 싶어서 구글검색을 감행했다.&lt;/p&gt;

&lt;p&gt;원래 처음의 생각은 검색으로 나온 정보를 내 언어로 다시 정리하려고 했다.(그래야 이해도 잘 되고, 내가 궁금한 부분을 명확하게 정리할 수 있기 때문이다)&lt;/p&gt;

&lt;p&gt;그러나 구글신은 이러한 나의 마음을 이미 알기라고 한듯 이미 미친듯이 잘 정리된 블로그를 소개해 주었다.&lt;/p&gt;

&lt;p&gt;그래도 내가 다시 정리하려고 했는데 다시보니 그 블로그 글을 똑같이 타이핑하는 것과 다름 없었다. 그래서 해당 블로그 글을 그대로 가져오고 출처를 남기기로 했다.&lt;/p&gt;

&lt;p&gt;그냥 링크만 남겨도 될 것 같지만 혹시나 그 글이 없어질 것을 염려했고, 내 저장소에 직접 남기고 싶었기 때문에 글을 복사해 왔다.&lt;/p&gt;

&lt;p&gt;아래는 해당 글과 링크&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;http://pinocc.tistory.com/175&quot;&gt;http://pinocc.tistory.com/175 [땅뚱 창고]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​         &lt;a href=&quot;http://bytebaker.com/2008/07/30/python-namespaces/&quot;&gt;http://bytebaker.com/2008/07/30/python-namespaces/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파이썬 프로그래밍을 보다보면 아래와 같은 문장을 만나곤 한다. 정확하게 어떤 의미인지 알고 싶어 여기저기 검색한 내용을 정리했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 문장을 이해하기 위해서는 파이썬의 namespace 라는 개념을 이해해야 한다. namespace 를 얘기하기 이전에 파이썬에서 name(변수명)이 의미하는 것을 생각해보자.&lt;/p&gt;

&lt;p&gt;아래와 같이 파이썬에서는 name 에 값을 줄 수 있다. 그리고 값 뿐 아니라 function 과 같은 형태도 name 을 줄 수 있다. 또한 동일한 name을 재사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬에서 names는 파이썬 객체 시스템과 함께 간다고 생각하면 된다. 즉 integer, string, list 및 function 도 모두 파이썬에서는 객체형태로 표현되고, name은 그 객체에 접근하기 위해 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;namespace 와 module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;namespace 는 names 를 담을 수 있는 공간이라고 생각하면 된다. 파이썬에서 namespace 를 이해하기 위해서 파이썬 모듈에 대한 약간의 이해가 필요하다. 파이썬에서 module 은 파이썬 코드를 담고 있는 파일이다. 해당 파일에는 파이썬 클래스, 함수 또는 단순하게 names 의 리스트가 들어있을 수 있다.&lt;/p&gt;

&lt;p&gt;각 모듈은 자신만의 유일한 namespace 를 갖는다.(모듈의 namespace 이름은 보통 모듈의 파일이름과 같다.) 그래서 동일한 모듈내에서 동일한 이름을 가지는 클래스나 함수를 정의할 수 없다. 또한 모듈은 각각 완벽하게 독립적(isolated)이기 때문에(namespace 가 다르기 때문에), 두 모듈은 동일한 이름을 갖는 클래스나 함수를 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;import 와 namespace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;import 명령을 가지고 namespace 에 대해서 조금 더 알아보도록 하자. module 을 import 하는 방법은 여러가지가 있다. 방법에 따라 namespace 가 달라 질 수가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;import &lt;module_name&gt;&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;모듈을 import 하는 가장 간단한 방법이고, 일반적으로 추천되는 방법이다. 이렇게 import 를 하게 되면 module 의 name 을 prefix 로 사용함으로써 모듈의 namespace 에 접근할 수 있다.&lt;/p&gt;

    &lt;p&gt;아래 예제에서 sys 는 모듈 이름이고, path 는 sys 모듈의 namespace 에 담겨있는 name 이다. 따라서 path 에 접근을 하기 위해서는 모듈 이름인 sys 를 prefix 로 붙여서 sys 모듈의 namespace 에 접근한 후에 사용해야 한다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;idlelib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;python34.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DLLs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;site-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from &lt;module_name&gt; import &amp;lt;name,&amp;gt;&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;모듈의 namespace 에서 import 에서 지정된 name 들을 직접 가져오도록 한다. 이렇게 하게 되면 import 이후에 지정한 name 들은 module 의 name을 prefix 로 지정하지 않고도 접근이 가능하다. 하지만, 이 경우에 module 에서 import 된 이름과 main script 에서 지정된 이름이 동일한 경우, 나중에 정의되는 이름으로 대체되어서 이전 것에 접근이 불가능하게 된다.&lt;/p&gt;

    &lt;p&gt;단지 몇개의 name 만 필요하다고 명확하게 알고 있는 경우에 사용하는 것이 유용하다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;idlelib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;python34.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DLLs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;site-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from &lt;module_name&gt; import *&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;2 와 동일하지만, module 에 있는 모든 name 을 직접 현재 namespace 로 가져오게 된다. 이렇게 되면 namespace 가 섞이게 되어서 일반적으로 사용을 권장하지 않는다. 차라리 첫번째 타입(1번)의 import 를 사용하는 것이 좋다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;__main__ namespace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;import 의 경우에 namespace 가 처리되는 것을 알아보았는데, import 가 아니고 파이썬 인터프리터가 최초로 파일을 읽어서 실행하는 경우를 살펴보자. 파이썬 인터프리터는 소스파일을 읽고, 그 안의 모든 코드를 실행하게 되는데, 코드를 실행하기 전에 특정한 변수값을 정의한다. 그중 하나가 &lt;strong&gt;name&lt;/strong&gt; 이라는 변수를 &lt;strong&gt;main&lt;/strong&gt; 으로 세팅을 한다.&lt;/p&gt;

&lt;p&gt;즉 python script.py 와 같이 직접 쉘에서 실행하는 경우에는 파이썬 인터프리터가 해당 script.py 모듈을 script 라는 namespace 가 아닌__main__ 이라는 namespace 로 간주하여 다루게 된다.&lt;/p&gt;

&lt;p&gt;따라서 처음에 궁금했던 아래 문장은 ‘만일 이 파일이 인터프리터에 의해서 실행되는 경우라면’ 이라는 의미를 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;즉 본인이 구현한 코드가 다른 파이썬 코드에 의해서 모듈로 import 될 경우도 있을 수 있고, 파이썬 인터프리터에 의해서 직접 실행될 경우도 있을 수 있는데, 위 코드는 인터프리터에 의해서 직접 실행될 경우에만 실행하도록 하고 싶은 코드 블럭이 있는 경우에 사용한다.&lt;/p&gt;

&lt;p&gt;아래 예제 코드와 결과를 보면 이해하기 쉽다.&lt;/p&gt;

&lt;p&gt;(참고: &lt;a href=&quot;http://ibiblio.org/g2swap/byteofpython/read/module-name.html&quot;&gt;http://ibiblio.org/g2swap/byteofpython/read/module-name.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Filename: using_name.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'This program is being run by itself'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'I am being imported from another module'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;output&gt;

```
This program is being run by itself
$ python using_name.py

$ python
&amp;gt;&amp;gt;&amp;gt; import using_name
I am being imported from another module
&amp;gt;&amp;gt;&amp;gt;

```
&lt;/output&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="python" /><summary type="html">해당내용을 패스트캠퍼스 수업시간에 한번 들은적이 있는데 다시보면 헷갈리고 명확하게 개념을 이해하고 싶어서 구글검색을 감행했다.</summary></entry><entry><title type="html">URL과 URI</title><link href="https://zooozoo.github.io/posts/2018-03-03-URL%EA%B3%BCURI/" rel="alternate" type="text/html" title="URL과 URI" /><published>2018-03-03T00:00:00+09:00</published><updated>2018-03-03T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/URL%EA%B3%BCURI</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-03-URL%EA%B3%BCURI/">&lt;h1 id=&quot;url과-uri&quot;&gt;URL과 URI&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;그림으로 배우는 http &amp;amp; network basic&lt;/code&gt;을 공부하다가 URL과 URI에 대한 이야기가 나와서 해당 내용에 대한 정확한 개념을 잡고 기록으로 남겨놓으려 한다. (물론 구글에 치면 진짜 잘나온다…)&lt;/p&gt;

&lt;p&gt;먼저 무엇에 대한 약자인지 알아봅시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL - Uniform Resource Locator&lt;/li&gt;
  &lt;li&gt;URI - Uniform Resource Identifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문자 그대로 해석해 보자면 URL은 “정형화된 리소스 위치표시” 라고 할 수 있고, URI는 “젖형화된 리소스 식별자”라고 할 수 있겠다.&lt;/p&gt;

&lt;p&gt;먼저 위키백과에 URI를 검색하면 아래와 같이 나온다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;통합 자원 식별자&lt;/strong&gt;(Uniform Resource Identifier, &lt;strong&gt;URI&lt;/strong&gt;)는 인터넷에 있는 자원을 나타내는 유일한 주소이다. URI의 존재는 인터넷에서 요구되는 기본조건으로서 인터넷 프로토콜에 항상 붙어 다닌다.&lt;/p&gt;

  &lt;p&gt;역사&lt;/p&gt;

  &lt;p&gt;URI와 URL은 역사를 함께 공유한다. 1994년 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%8C%80_%EB%B2%84%EB%84%88%EC%8A%A4_%EB%A6%AC&quot;&gt;팀 버너스 리&lt;/a&gt;가 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%98%EC%9D%B4%ED%8D%BC%ED%85%8D%EC%8A%A4%ED%8A%B8&quot;&gt;하이퍼텍스트&lt;/a&gt;[&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90#cite_note-FOOTNOTEPalmer2001-1&quot;&gt;1]&lt;/a&gt;를 제안하면서 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC&quot;&gt;하이퍼링크&lt;/a&gt;의 대상이 되는 자원을 대표하는 짧은 문자열로 URL의 개념을 암묵적으로 도입하였다. 당시 사람들은 이를 “하이퍼텍스트 이름”[&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90#cite_note-FOOTNOTEW3C1992-2&quot;&gt;2]&lt;/a&gt; 또는 “문서 이름”으로 불렀다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;큰 의미로 보자면 그게 그말이다.&lt;/p&gt;

&lt;p&gt;URI가 가장 상위집합이라고 할 수 있고 그 안에 URL이나 URN과 같은 개념이 있다고 생각하면 되겠다.&lt;/p&gt;

&lt;p&gt;의미상으로도 리소스의 위치를표시하는 것의 목적이 결국엔 리소스를 식별해 나가는 것이므로 단어의 해석만으로도 관련내용을 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;조금만 더 자세히 들어가자면 이전에는 URL이 가리키는게 파일 리소스 였는데, 요즘은 Rewrite 등의 Apache , IIS, Tomcat 핸들러 때문에 이를 자원 이라고 부른다. (여기부터 조금 잘 모르는 내용이긴 한데 Apache를 비롯한 웹서버가 생겨나면서 부터 파일 리소스가 -&amp;gt; 자원의 개념으로 다뤄졌던 것 같다.)&lt;/p&gt;

&lt;p&gt;이전에는 요청하는 주소가 실제의 파일이나 폴더트리였다면 요즘은 그냥 해당 자원을 가리키는 구분자로서의 역할을 한다는 것.&lt;/p&gt;

&lt;p&gt;알고보면 그렇게 어렵거나 한 개념은 아니지만 웹 기술의 발전이 어떻게 이루어 졌는지에 대한 한 조각을 할 수 있는 부분인 것 같다.&lt;/p&gt;

&lt;p&gt;(참고한 글)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.lael.be/post/61&quot;&gt;https://blog.lael.be/post/61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90&quot;&gt;위키백과&lt;/a&gt;&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="network" /><summary type="html">`그림으로 배우는 http &amp; network basic`을 공부하다가 URL과 URI에 대한 이야기가 나와서 해당 내용에 대한 정확한 개념을 잡고 기록으로 남겨놓으려 한다. (물론 구글에 치면 진짜 잘나온다...)</summary></entry><entry><title type="html">Spanning multi-valued relationships</title><link href="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/" rel="alternate" type="text/html" title="Spanning multi-valued relationships" /><published>2018-01-24T00:00:00+09:00</published><updated>2018-01-24T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/Django_Spanning%20multi-valued%20relationships</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/">&lt;p&gt;장고의 모델 문서를 공부하다가&lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;(Making Queries)&lt;/a&gt; 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하… 내 시간…)&lt;/p&gt;

&lt;p&gt;해당 내용을 이미 알고 있고 스압을 느끼신다면 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 의 답변&lt;/a&gt;으로 바로 가보시길…&lt;/p&gt;

&lt;p&gt;해당 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spanning multi-valued relationships&lt;/code&gt; 라는 부분인데 ForeignKey나 Many-to-Many관계에있는 모델중에서 관계된 모델을 조건으로 해서 filtering 하는 내용이다.&lt;/p&gt;

&lt;p&gt;장고 문서에서는 아래의 모델을 기준으로 설명한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tagline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mod_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_pingbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 모델은 Blog (일) &amp;lt; - &amp;gt; (다) Entry &amp;lt; - &amp;gt; (다)Author 의 관계를 가지고 있다.&lt;/p&gt;

&lt;p&gt;다음은 장고 문서에서 설명하는 내용&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To handle both of these situations, Django has a consistent way of processing &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls. Everything inside a single &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call is applied simultaneously to filter out items matching all those requirements. Successive &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call.&lt;/p&gt;

  &lt;p&gt;That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both &lt;em&gt;“Lennon”&lt;/em&gt; in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;To select all blogs that contain an entry with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline &lt;strong&gt;as well as&lt;/strong&gt; an entry that was published in 2008, we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Suppose there is only one blog that had both entries containing &lt;em&gt;“Lennon”&lt;/em&gt; and entries from 2008, but that none of the entries from 2008 contained &lt;em&gt;“Lennon”&lt;/em&gt;. The first query would not return any blogs, but the second query would return that one blog.&lt;/p&gt;

  &lt;p&gt;In the second example, the first filter restricts the queryset to all those blogs linked to entries with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline. The second filter restricts the set of blogs &lt;em&gt;further&lt;/em&gt; to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blog&lt;/code&gt; items with each filter statement, not the &lt;code class=&quot;highlighter-rouge&quot;&gt;Entry&lt;/code&gt; items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;요약해서 설명하자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같이 필터 안에 여러개의 조건을 써서 찾는 것과&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로(chaining) 필터를 나눠서 각각 찾는것이 다른 결과를 가지며 그 이유는 결과가 Entry를 탐색하는 것이 아닌  Blog를 탐색하는 것이기 때문이라고 설명하고 있다.&lt;/p&gt;

&lt;p&gt;두 번째 예시가 잘 이해되지 않았는데 만약 첫번째 filter로 blog 객체를 추려낸 후에 해당 결과를 가지고 두 번째 filter를 적용하면 어떻게 하든 첫 번째 예시와 같은 결과를 할 것 같다. 결국에 돌고 돌아 stackoverflow를 통해 내용을 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;누군가 나랑 똑같은 질문을 stackoverflow에 했고 아주 상세한 설명이 있어서 덕분해 잘 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;장고에 있는 문서보다는 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 에 예시&lt;/a&gt;로 쓰여진 내용이 훨씬 잘 이해 된다.&lt;/p&gt;

&lt;p&gt;아래는 해당 답변 내용이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The case in which results of “multiple arguments filter-query” is different then “chained-filter-query”, following:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Selecting referenced objects on the basis of referencing objects and relationship is one-to-many (or many-to-many).&lt;/p&gt;

    &lt;p&gt;Multiple filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  same referencing model   ^^                ^^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Chained filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Both queries can output different result:
If more then one rows in referencing-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt;can refer to same row in referenced-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;. This can be the case in &lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt; have either 1:N (one to many) or N:M (many to many) relation-ship.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Example:&lt;/p&gt;

  &lt;p&gt;Consider my application &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; has two models &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt;. An employee in &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; can have more than dependents(in other-words a dependent can be son/daughter of a single employee, while a employee can have more than one son/daughter).
Ehh, assuming like husband-wife both can’t work in a &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt;. I took 1:m example&lt;/p&gt;

  &lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; is referenced-model that can be referenced by more then &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt; that is referencing-model. Now consider relation-state as follows:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee:        Dependent:
+------+        +------+--------+-------------+--------------+
| name |        | name | E-name | school_mark | college_mark |
+------+        +------+--------+-------------+--------------+
| A    |        | a1   |   A    |          79 |           81 |
| B    |        | b1   |   B    |          80 |           60 |
+------+        | b2   |   B    |          68 |           86 |
                +------+--------+-------------+--------------+  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt;refers to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, and dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;b1, b2&lt;/code&gt;references to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Now my query is:&lt;/p&gt;

  &lt;p&gt;Find all employees those having son/daughter has distinction marks (say &amp;gt;= 75%) in both college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Output is ‘A’ dependent ‘a1’ has distinction marks in both college and school is dependent on employee ‘A’. Note ‘B’ is not selected because nether of ‘B’’s child has distinction marks in both college and school. Relational algebra:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75 AND college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;In Second, case I need a query:&lt;/p&gt;

  &lt;p&gt;Find all employees whose some of dependents has distinction marks in college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;This time ‘B’ also selected because ‘B’ has two children (more than one!), one has distinction mark in school ‘b1’ and other is has distinction mark in college ‘b2’.
Order of filter doesn’t matter we can also write above query as:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;result is same! Relational algebra can be:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;(Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75)Dependent) &lt;strong&gt;⋈&lt;/strong&gt;(college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Note following:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dq1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Outputs same result: &lt;code class=&quot;highlighter-rouge&quot;&gt;[&amp;lt;Dependent: a1&amp;gt;]&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;I check target SQL query generated by Django using &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd1.query&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd2.query&lt;/code&gt;both are same(Django 1.6).&lt;/p&gt;

  &lt;p&gt;But semantically both are different to &lt;em&gt;me&lt;/em&gt;. first looks like simple section σ&lt;a href=&quot;Dependent&quot;&gt;school_mark &amp;gt;= 75 AND college_mark &amp;gt;= 75&lt;/a&gt; and second like slow nested query: σ&lt;a href=&quot;σ[college_mark &amp;gt;= 75](Dependent)&quot;&gt;school_mark &amp;gt;= 75&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;If one need &lt;a href=&quot;http://codepad.org/c6VODLRf&quot;&gt;Code @codepad&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;btw, it is given in documentation @&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;Spanning multi-valued relationships&lt;/a&gt; I have just added an example, I think it will be helpful for someone new.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스택오버플로우에 올라온 답변을 요약해 보자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 필터링은 dependent에서 두개의 조건을 동시에 만족하는 Employee를 찾는 것 이므로 결과는 Employee A가 된다.&lt;/p&gt;

&lt;p&gt;반면에&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 경우 첫번째 필터에서 걸러지는 내용은 Employee A, B 가 된다.(왜냐하면 dependent 의 a1과 b1이 조건을 만족했기 때문이다. ) 두번째 필터가 포인트 인데 두번째 필터에서 college_mark가 75점 이상인 dependent를 가지고 있는 Employee를 다시 찾게되고 그 결과값도 Employee A, B가 된다. 왜냐하면 첫번째 필터에서 걸러진 후의 결과는 Employee A, B 이고 두번째 필터는 이 중에서 다시 college_mark가 75점 이상인 경우를 찾아내는 것인데  Employee B의 경우 college_mark가 75점 이상인 dependent b2 를 가지고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;즉 Employee B는 college_mark와 school_mark가 동시에 75점 이상인 dependent를 가지고 있지 않지만, school_mark가 75점 이상인 dependent b1과 college_mark가 75점 이상인 dependent b2 이렇게 두개의 dependent를 가지고 있기 때문에 두 번째 필터에서도 해당 조건을 만족하는 것 이다.&lt;/p&gt;

&lt;p&gt;언뜻 생각하기에 혼동되는 부분이 두번째 필터를 생각할 때 dependent를 기준으로 생각하기 때문이다. 첫번째 필터에서 해당되는 dependent가 a1과 b1 이기 때문에 두번 째 필터에서 dependent a1, b1 이렇게 2개를 기준으로 필터링 해야할 것 같지만 Employee 기준으로 생각하면 첫번째 필터의 결과는 해당조건을 만족하는 dependent와 연결된 Employee가 되기 때문에  필터를 하기 전 과 후는 같은 상황이 된다.&lt;/p&gt;

&lt;p&gt;이해하고 다시 적은 내용이지만 다시 생각해 봐도 글로 설명하는 것 보다 예시를 통해 이해하는 편이 훨씬 도움이 되는 듯 하다.&lt;/p&gt;

&lt;p&gt;잘 이해가 안된다면 stackoverflow의 답변을 차근차근 읽어내려 간다면 충분히 이해할 수 있을 것 같다.&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="django" /><summary type="html">장고의 모델 문서를 공부하다가[(Making Queries)](https://docs.djangoproject.com/ko/1.11/topics/db/queries/#spanning-multi-valued-relationships) 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하... 내 시간...)</summary></entry></feed>