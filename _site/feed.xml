<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="https://zooozoo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zooozoo.github.io/" rel="alternate" type="text/html" /><updated>2018-04-11T23:31:27+09:00</updated><id>https://zooozoo.github.io/</id><title type="html">Record|Organize|Make it mine</title><subtitle>My programming study blog and I hope it help someone who struggling with code</subtitle><author><name>Seok Hun Zoo</name></author><entry><title type="html">기술면접 준비</title><link href="https://zooozoo.github.io/records/2018-03-23-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/" rel="alternate" type="text/html" title="기술면접 준비" /><published>2018-03-23T00:00:00+09:00</published><updated>2018-03-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-03-23-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;면접을 위해 따로 공부하는 것 보다는, 열심히 공부한 내용을 바탕으로 면접에서 내 능력을 잘 보여주는 것을 더 선호한다. 면접을 위한 공부가 취업 말고는 무슨 필요가 있겠냐는 생각을 가지고 있다. 그런데 개발자로 이직하기 위해서 면접을 준비하면서 느낀점은 기술면접의 경우 면접준비 자체가 내 실력을 올려가는 데에 도움이 되겠다는 생각을 가질 수 있었다. 단편적으로 ‘A는 B입니다.’라고 답변할 수도 있겠지만 한단계씩 더 깊이 물어보는 질문에 답변할 수 있으려면 기술에 대한 기본적인 지식과 이해가 있어야만 가능하기 때문이다.&lt;/p&gt;

&lt;p&gt;면접 준비를 단순히 면접만 준비하기 위한 것이 아니라, 개발자로서 일하기 위해 알고 있어야할 기본 지식들을 잘 공부할 수 있는 기회로서 면접준비 시간을 가져갈 생각이다. 그렇게 되기를 희망하면서 시작한다!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본적인 질문 리스트에 대한 참고 사이트
 &lt;a href=&quot;http://hahahoho5915.tistory.com/16&quot;&gt;http://hahahoho5915.tistory.com/16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개별 항목 설명에 참고한 책, 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;책 :
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;커니핸 교수의 Hello, Digital World&lt;/code&gt; / 제이펍 출판사&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하루3분 네트워크 교실&lt;/code&gt; / 영진닷컴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overloading과 Overriding에 대한 설명
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://itpangpang.xyz/105&quot;&gt;http://itpangpang.xyz/105&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session, Cookie, Cache
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://genesis8.tistory.com/220&quot;&gt;http://genesis8.tistory.com/220&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/80&quot;&gt;http://jeong-pro.tistory.com/80&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model - View - Controller 패턴
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&quot;&gt;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process와 Thread
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@kd4/3&quot;&gt;https://brunch.co.kr/@kd4/3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Socket
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://jkkang.net/unix/netprg/chap2/net2_1.html&quot;&gt;http://jkkang.net/unix/netprg/chap2/net2_1.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&quot;&gt;http://chan7ee.tistory.com/entry/%EC%86%8C%EC%BC%93socket-%ED%8F%AC%ED%8A%B8port-TCP-UDP-%EC%A0%95%EC%9D%98&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&quot;&gt;https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%86%8C%EC%BC%93&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack, Queue, Deque
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wayhome25.github.io/cs/2017/05/28/algorithm/&quot;&gt;https://wayhome25.github.io/cs/2017/05/28/algorithm/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jeong-pro.tistory.com/97&quot;&gt;http://jeong-pro.tistory.com/97&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&quot;&gt;http://sw-tech.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B01-%EC%84%A0%ED%98%95-%EB%B9%84%EC%84%A0%ED%98%95&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot;&gt;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IaaS, PaaS, SaaS
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.bloter.net/archives/259518&quot;&gt;http://www.bloter.net/archives/259518&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database Index
    &lt;ul&gt;
      &lt;li&gt;[https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4)](https://ko.wikipedia.org/wiki/%EC%9D%B8%EB%8D%B1%EC%8A%A4&lt;/em&gt;(%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4))&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lalwr.blogspot.kr/2016/02/db-index.html&quot;&gt;https://lalwr.blogspot.kr/2016/02/db-index.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://yagi815.tistory.com/288&quot;&gt;http://yagi815.tistory.com/288&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://parkbosung.tistory.com/11&quot;&gt;http://parkbosung.tistory.com/11&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oop-객체지향-프로그래밍&quot;&gt;OOP (객체지향 프로그래밍)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OOP란 Object-Oriented-Programming의 약어로써 객체지향 프로그래밍을 의미한다.  데이터를 객체로 취급하여 프로그램에 반영한 것이며, 순차적으로 프로그램이 동작하는 기존의 것들(절차지향 프로그래밍 예: C언어)과는 다르게 객체와 객체의 상호작용을 통해 프로그램이 동작하는 것을 말한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;OOP의 특징&lt;/li&gt;
  &lt;li&gt;객체지향 프로그래밍은 코드의 재사용성이 높다.&lt;/li&gt;
  &lt;li&gt;코드의 변경이 용이&lt;/li&gt;
  &lt;li&gt;직관적인 코드분석&lt;/li&gt;
  &lt;li&gt;개발속도 향상&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상속을 통한 장점 극대화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Object
 Object(객체)는 OOP에서 데이터(변수)와 그 데이터에 관련되는 동장(함수), 즉 절차, 방법, 기능을 모두 포함한 개념이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overloading-vs-overriding&quot;&gt;Overloading vs Overriding&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Overloading
    &lt;ul&gt;
      &lt;li&gt;한 클래스 안에서 같은 이름의 메소드를 여러개 정의하는 것&lt;/li&gt;
      &lt;li&gt;매개변수의 타입이 다르거나 개수가 달라야 한다.&lt;/li&gt;
      &lt;li&gt;기본적으로 메소드의 이름이 같기 때문에 매개변수의 타입과 개수가 같다면 오류를 뱉는다. 이름이 같더라도 매개변수의 타입과 개수로 구분된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overriding
    &lt;ul&gt;
      &lt;li&gt;상속에서 나온 개념&lt;/li&gt;
      &lt;li&gt;상위 클래스(부모 클래스)의 메소드를 하위 클래스(자식 클래스)에서 재정의&lt;/li&gt;
      &lt;li&gt;이미 존재하는 클래스를 약간만 변경하여 사용하고자 할 경우 새로 클래스를 만드는 것이 아니라 기존 클래스를 상속받아서 기능을 추가하거나 변경하여 사용하는데 이 때 기존 클래스의 기으을 상속 받는 것을 Overriding이라고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-cookie-cache&quot;&gt;Session, Cookie, Cache&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;HTTP 프로토콜은 무상태(stateless)다. 이는 HTTP 서버가 클라이언트 요청에 대해 아무것도 기억하지 않아도 된다는 것을 뜻하는 약간의 전문 용어다. 서버는 요청된 페이지를 반환한 후 각 데이터 교환의 모든 기록을 폐기해도 된다.&lt;/li&gt;
      &lt;li&gt;세션과 쿠키의 차이점을 크게 보자면, 쿠키는 상태정보를 클라이언트에 저장하는 방식이고, 세션은 상태정보를 웹 서버에 저장하는 방식이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cookie
    &lt;ul&gt;
      &lt;li&gt;1994년에 넷스케이프가 &lt;code class=&quot;highlighter-rouge&quot;&gt;쿠키&lt;/code&gt;라는 해결책을 발명했다.&lt;/li&gt;
      &lt;li&gt;서버가 웹페이지를 브라우저에 보낼 때, 거기에는 브라우저가 저장하기로 되어 있는 부가적인 텍스트 덩어리들(각각 최대 약 4,000바이트)이 포함 될 수 있다. 각 덩어리를 쿠키라고 하다. 브라우저가 차후에 같은 서버에 요청을 보낼 때, 브라우저는 쿠키를 다시 전송한다. 실제로 서버는 클라이언트의 메모리를 사용하여 클라이언트의 이전 방문에 대한 정보를 기억하는 셈이다.&lt;/li&gt;
      &lt;li&gt;각 쿠키에는 이름이 있으며, 단일 서버에 방문할 때마다 여러개의 쿠키가 저장될 수 있다.&lt;/li&gt;
      &lt;li&gt;쿠키느 프로그램이 아니며, 액티브 콘텐츠가 없다. 쿠키는 완전히 수동적이다.&lt;/li&gt;
      &lt;li&gt;쿠키는 저장됐다가 이후에 다시 전송되는 문자열일 뿐이고, 서버에서 비롯하지 않은 어떤 것도 그 서버로 돌아가지 않는다.&lt;/li&gt;
      &lt;li&gt;쿠키는 자신이 유래한 도메인으로만 전송된다.&lt;/li&gt;
      &lt;li&gt;쿠키는 유효기간이 있어서 그 이후에는 브라우저에 의해 삭제된다. 브라우저가 실제로 쿠키를 받아들이거나 반환해야 한다는 요구 사항은 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session
    &lt;ul&gt;
      &lt;li&gt;쿠키는 모든 정보를 브라우저에 저장하기 때문에 보안상의 이슈가 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션은 사용자를 확인 할 수 있는 식별자만 쿠키의 형태로 브라우저에 저장하고, 그와 관련된 데이터는 서버의 데이터베이스에 저장하는 형태다.&lt;/li&gt;
      &lt;li&gt;session-id를 탈취당할 우려가 있기 때문에 보안적인 문제가 여전히 남아있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cache
    &lt;ul&gt;
      &lt;li&gt;Cache란 웹페이지 Resource파일들(오디오, 비디오, 이미지 등)의 임시 저장소로 브라우저에 저장된다.&lt;/li&gt;
      &lt;li&gt;다음에 같은 웹페이지(혹은 웹사이트)로 접속시 이미 리소스 파일들이 브라우저에 저장되어 있기 때문에, 페이지 로딩 속도를 개선해 준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Session과 Cookie의 비교
    &lt;ul&gt;
      &lt;li&gt;쿠키는 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아있을 수 있다. 또한 만료기간을 넉넉하게 잡아두면 쿠기삭제를 할 때 까지 유지될 수도 있다.&lt;/li&gt;
      &lt;li&gt;반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관 없이 삭제된다.&lt;/li&gt;
      &lt;li&gt;쿠키에 정봑 있기 때문에는 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mvc-패턴&quot;&gt;MVC 패턴&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Model - View - Controller 는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.&lt;/li&gt;
  &lt;li&gt;이 패턴을 성공적으로 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;MVC에서 모델은 애플리케이션의 정보(데이터)를 나타내며, 뷰는 텍스트, 체크박스 항목 등과 같은 사용자의 인터페이스 요소를 나타내고, 컨트롤러는 데이터와 비즈니스 로직 사이의 상호동작을 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thread와-process&quot;&gt;Thread와 Process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Process
    &lt;ul&gt;
      &lt;li&gt;운영체제에서 실행중인 하나의 프로그램 (하나 이상의 쓰레드를 포함한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thread
    &lt;ul&gt;
      &lt;li&gt;프로세스 내에서 동시에 실행되는 독립적인 실행 단위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;프로세스는 운영체제로부터 자원을 할당받는 작업의 단위이고 스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위다. 프로세스는 실행될 때 운영체제로부터 프로세서를 할당받고, 운영되기 위해 필요한 주소 공간, 메모리 등 자원을 할당받는다. 스레드는 한 프로세스 내에서 동작되는 여러 실행의 흐름으로, 프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내에 스레드끼리 공유하면서 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 프로세스(멀티 프로세스)로 할 수 있는 작업을 하나의 프로세스에서 스레드로 나눠서 하는 이유
    &lt;ul&gt;
      &lt;li&gt;결론적으로는 운영체제는 시스템 작업을 효율적으로 관리하기 위한 것이므로 이 목적을 달성하기 위해 스레드를 사용하는 것&lt;/li&gt;
      &lt;li&gt;프로세스로 실행되는 작업을 멀티 스레드로 실행할 경우, 프로세스를 생성하여 자원을 할당하는 시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있다. 뿐만 아니라 프로세스 간의 통신보다 스레드 간의 통신의 비용이 적으므로 작업들 간의 통신의 부담이 줄어들게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스레드 활용의 단점
    &lt;ul&gt;
      &lt;li&gt;스레드를 활용하면 자원의 효율성이 증가하기도 하지만 스레드 간의 자원 공유는 전역 변수를 이용하므로 동기화 문제에 신경을 써야한다. (각별한 주의 요구됨)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;socket&quot;&gt;Socket&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;소켓은 1982년 BSD(Berkeley Software Distribution) UNIX 4.1에서 처음 소개되었으며 현재 널리 사용되고 있는 것은 BSD UNIX 4.3에서 개정된 것이다.&lt;/li&gt;
  &lt;li&gt;소프트웨어가 서로 연결하려면 소켓 연결이 필요하다. 소켓은 두 시스템 사이의 네트워크 연결을 나타내는 객체다. 우선적으로 소프트웨어가 연결이 되려면 가장 중요한 것은 두 소프트웨어가 상대방과 통신하는 방법, 즉 상대방에게 비트를 보내는 방법을 알고 있어야만 한다. 소켓 연결은 두 시스템 간의 정보를 연결한다는 것을 의미한다. 그 정보에는 네트워크 주소(IP주소)와 포트번호도 포함되어 있고 이것들을 통해서 소켓을 개설할 수 있다.&lt;/li&gt;
  &lt;li&gt;소켓은 소프트웨어로 작성된 통신 접속점이라고 할 수 있는데 네트웍 응용 프로그램은 소켓을 통하여 통신망으로 데이터를 송수신하게 된다.&lt;/li&gt;
  &lt;li&gt;네트워크 소켓은 컴퓨터 네트워크를 경유하는 프로세스 간 통신의 종착점이다.(위키백과)&lt;/li&gt;
  &lt;li&gt;네트워크 계층을 기준으로 보자면 소켓은 응용프로그램과 트랜스포트 계층 사이에서 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;소켓은 응용프로그램에서 TCP/IP를 이용하는 창구 역할을 하며 응용 프로그램과 소켓 사이의 인터페이스를 ‘소켓 인터페이스’라고 한다.&lt;/li&gt;
  &lt;li&gt;한 컴퓨터 내에는 보통 한 세트의 TCP/IP가 수행되고 있으며, 네트웍 드라이버는 LAN카드와 같은 네트웍 접속장치(NIU: Network Interface Unit)를 구동하는 소프트웨어를 말한다.&lt;/li&gt;
  &lt;li&gt;포트번호는 TCP/IP가 지원하는 상위 계층의 프로세스를 구분하기 위한 번호이므로 하나의 컴퓨터내에 있는 응용 프로세스들은 반드시 서로 다른 포트번호를 사용하여야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-queue-deque&quot;&gt;Stack, Queue, Deque&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;선형, 비선형
    &lt;ul&gt;
      &lt;li&gt;자료구조란 컴퓨터에서 처리할 자료를 효율적으로 관리하고 구조화시키기 위한 것. 즉 자료를 효율적으로 사용하기 위해 자료의 특성에 따라 분류하여 구성하고 저장 및 처리하는 모든 작업을 의미&lt;/li&gt;
      &lt;li&gt;자료구조는 정렬을 하거나 검색을 할 때, 인덱스 처리를 하거나 파일편성을 할 때 이용된다.&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/23202B4C53FDC5600C74C3&quot; alt=&quot;자료구조&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 한 곳(방향)으로 제한한 자료구조&lt;/li&gt;
      &lt;li&gt;선입선출(LIFO) 구조, push(), pop()&lt;/li&gt;
      &lt;li&gt;함수의 콜스택에 쓰이고 문자열을 역순으로 출력할 때, 연산자 후위표기법등에 쓰인다.&lt;/li&gt;
      &lt;li&gt;활용 예시: undo나 이전페이지 돌아가는것, 웹브라우저 방문기록, 역순 문자열 만들기&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/2214C14C53FDC5601E1C35&quot; alt=&quot;스택&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력이 각각 양 끝에서 이루어진 자료구조&lt;/li&gt;
      &lt;li&gt;후입선출(FiFO)구조 put(), get()&lt;/li&gt;
      &lt;li&gt;일반적인 큐의 단점: 큐에 메모리가 남아 있어도 꽉 차있는 것으로 판단할 수 있음 rear가 배열의 끝에 도달했을 경우 -&amp;gt; 개선된 원형 큐가 나옴&lt;/li&gt;
      &lt;li&gt;원형큐의 단점: 메모리 공간은 잘 활용하나 배열로 구현되어 있기 때문에 큐의 크기가 제한된다. -&amp;gt; 링크드리스트로 큐가 나옴&lt;/li&gt;
      &lt;li&gt;링크드리스트로 구현한 큐는 큐의 크기가 제한이 없고 삽입, 삭제가 편리하다.&lt;/li&gt;
      &lt;li&gt;활용 예시: 우선순위가 같은 작업 예약(인쇄 대기열), 콜센터 고객 대기 시간&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/2519EA4C53FDC5611706C9&quot; alt=&quot;큐&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deque
    &lt;ul&gt;
      &lt;li&gt;자료의 입력과 출력을 약 쪽 끝에서 가능하게 하는 자료구조&lt;/li&gt;
      &lt;li&gt;스크롤(scroll): 입력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;셸프(shelf): 출력이 한쪽 끝으로만 가능하도록 제한한 덱&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/221D914C53FDC56011326E&quot; alt=&quot;덱&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;도커란?
    &lt;ul&gt;
      &lt;li&gt;도커란 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 다양한 프로그램, 실행환경을 컨테이너로 추상화 하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨테이너(가상머신과의 차이점)
    &lt;ul&gt;
      &lt;li&gt;컨테이너는 격리된 공간에서 프로세스가 동작하는 기술이다. 가상화 기술의 하나지만 기존 방식과는 차이가 있다.&lt;/li&gt;
      &lt;li&gt;기존의 가상머신은 호스트 OS위에 게스트 OS전체를 가상화하여 사용하는 방식이다. 무겁고 느려서 운영환경에선 사용할 수 없었다.&lt;/li&gt;
      &lt;li&gt;이러한 상황을 개선하기 위해 CPU의 가상화 기술(HVM)을 이용한 KVM(Kernel-based Virtual Machine)과 반가상화(Paravirtualization)방식의 Xen이 등장한다. 이러한 방식은 게스트 OS가 필요하긴 하지만 전체 OS를 가상화하는 방식이 아니였기 때문에 호스트형 가상화 방식에 비해 성능이 향상되었다. 이러한 기술들은 클라우드 서비스에서 가상 컴퓨팅 기술의 기반이 되었다.&lt;/li&gt;
      &lt;li&gt;전가상화든 반가상화든 추가적인 OS를 설치하여 가상화하는 방법은 어쨌든 성능문제가 있었고 이를 개선하기 위해 프로세스를 격리 하는 방식이 등장한다. 리눅스 에서는 이 방식을 리눅스 컨테이너라고 하고 단순히 프로세스를 격리시키기 때문에 가볍고 빠르게 동작한다. CPU나 메로리는 딱 프로세스가 필요한 만큼만 추가로 사용하고 성능적으로도 거의 손실이 없다.&lt;/li&gt;
      &lt;li&gt;이러한 컨테이너라는 개념은 도커가 처음 만든 것은 아니었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지
    &lt;ul&gt;
      &lt;li&gt;도커에서 가장 중요한 개념은 컨테이너와 함께 이미지라는 개념이다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다. 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.&lt;/li&gt;
      &lt;li&gt;이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iaas-paas-saas&quot;&gt;IaaS, PaaS, SaaS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;최초 클라우드 서비스는 지메일이나 드롭박스, 네이버 클라우드처럼 소프트웨어를 웹에서 쓸 수 있는 SaaS가 대부분이었다. 그러다가 서버와 스토리지, 네트워크 같은 컴퓨팅 인프라 장비를 빌려주는 IaaS 플랫폼을 빌려주는 PaaS으로 늘어났다. 클라우드 서비스는 어떤 자원을 제공하느냐에 따라 이처럼 크게 3가지로 나뉜다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bloter.net/wp-content/uploads/2016/07/cast2_iaas-paas-saas.jpg&quot; alt=&quot;참고그림&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SaaS가 이미 만들어진 레고 모형, IaaS가 레고 공장이라면, PaaS는 레고 블럭이라 할 수 있다.&lt;/li&gt;
  &lt;li&gt;SaaS : SaaS는 클라우드 환경에서 운영되는 애플리케이션 서비스를 말한다. 모든 서비스가 클라우드에서 이뤄진다. 소프트웨어를 구입해서 PC에 설치하지 않아도 웹에서 소프트웨어를 빌려쓸 수 있다. 
SaaS는 필요할 때 원하는 비용만 내면 어디서든 곧바로 슬 수 있다는 장범이 있다. PC나 기업 서버에 소프트웨어를 설치할 필요가 없다. 소프트웨어 설치를 위해 비용과 시간을 들이지 않아도 된다. SaaS는 중앙에서 해당 소프트웨어를 관리하기 때문에 사용자가 일일이 업그레이드나 패치 작업을 할 필요도 없다.&lt;/li&gt;
  &lt;li&gt;PaaS : PaaS는 소프트웨어 서비스를 개발할 때 필요한 플랫폼을 제공하는 서비스다. 사용자는 PaaS에서 필요한 서비스를 선택해 애플리케이션을 개발하면 된다. PaaS 운영 업체는 개발자가 소프트웨어를 개발할 때 필요한 API를 제공해 개발자가 좀 더 편하게 앱을 개발할 수 있게 돕는다. 일종의 레고 블럭같은 서비스다. 개발자가 개발을 하는 데 필요한 도구와 환경을 사용하고, 사용한 만큼만 비용을 내기 때문에 개발자로선 비용 부담을 덜 수 있다. 단, 플랫폼 기반으로 애플리케이션을 개발하기 때문에 특정 플랫폼에 종속될 수 있다는 단점이 있다. A 서비스 업체의 PaaS에서 앱을 개발하고 이 작업을 이어서 B 외사의 PaaS에서 하기가 쉽지 않다는 뜻이다. 다양한 플랫폼에서 작업하려면 이에 맞게 앱을 수정하는 과정이 필요하다.&lt;/li&gt;
  &lt;li&gt;IaaS: 데이터센터를 구축하는 대신 클라우드를 이용해 필요한 컴퓨팅 인프라를 사용하는 걸 IaaS라고 부른다. 이용자는 서버나 스토리지를 구입,운영하는 비용을 줄일 수 있다. IaaS는 인터넷을 통해 서버와 스토리지 등 데이터센터 자원을 빌려 쓸 수 있는 서비스를 일컫는다. 이용자는 직접 데이터센터를 구축할 필요 없이 클라우드 환경에서 필요한 인프라를 꺼내 스면 된다. 이렇게 빌려온 인프라에서 사용자는 운영체제를 설치하고, 애플리케이션 등을 설치한 다음 원하는 서비스를 운영할 수 있다. 
IaaS는 가상 서버, 데이터 스토리지 같은 기존 데이터센터가 제공하는 서비스를 제공한다. 사용자는 이런 서비스를 조합해 애플리케이션을 실행하거나 운영할 수 있다. 게다가 물리적으로 만들어진 환경이 아니기 때문에 사용하지 않을 때 시스템을 해체하는 것도 손쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;database-index&quot;&gt;Database Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스틑 데이터베이스 분야에 있어서 테이블에 대한 동작의 속도를 높여주는 자료 구조를 일컫는다. 인덱스는 테이블 내의 1개의 컬럼, 혹은 여러개의 컬럼을 이용하여 생성될 수 있다. 고속의 검색 동작뿐만 아니라 레코드 접근과 관련 효율적인 순서 매김 동작에 대한 기초를 제공한다. 인덱스를 저장하는 데 필요한 디스크 공간은 보통 테이블을 저장하는 데 필요한 디스크 공간보다 작다. (왜냐하면 보통 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목들은 갖고 있지 않기 때문이다.) 관계형 데이터베이스에서는 인덱스는 테이블 부분에 대한 하나의 사본이다.
(위키백과)&lt;/li&gt;
  &lt;li&gt;INDEX란
RDBMS에서 검색속도를 높이기 위해 사용하는 하나의 기술. INDEX는 색인이다. 해당 Table의 컬럼을 색인화(따로 파일로 저장)하여 검색시 해당 Table의 레코드를 모두 스캔하는게 아니라 색인화 되어있는 INDEX파일을 검색하여 검색속도를 빠르게 한다. 이런 INDEX는 Tree구조로 색인화 한다. RDBMS에서 사용하는 INDEX는 Balance Search Tree를 사용한다. 실제로 RDBMS에서 사용되는 B-Tree는 B-Tree에서 파생된 B+Tree를 사용한다고 한다. 
(참고로 Oracle이나 MSSQL에서는 여러 종류의 Tree를 선택하여 사용가능하다.)&lt;/li&gt;
  &lt;li&gt;INDEX의 원리
INDEX를 해당 컬럼에 주게 되면 초기 Table생성시 만들어진 MYD, MYI, FRM 3개의 파일 중에서 MYI에 해당 컬럼을 색인화 하여 저장한다. 물론 INDEX를 사용하지 않을 시에는 MYI파일은 비어 있다. 그래서 INDEX를 해당컬럼에 만들게 되면 해당컬럼을 따로 인덱싱하여 MYI파일에 입력한다. 그래서 사용자가 SELECT쿼리로 INDEX가 사용하는 쿼리를 사용시 해당 Table을 검색하는 것이 아니라 빠른 Tree로 정리해둔 MYI파일의 내용을 검색한다. 만약 INDEX를 사용하지 않은 SELECT쿼리라면 해당 Table을 모두 스캔하여 검색한다. 이는 책의 뒷부분에 찾아보기와 같은 의미로 정리해둔 단어중에서 원하는 단어를 찾아서 페이지수를 보고 쉽게 찾을 수 있는 개념과 같다. 만약 이 찾아보기가 없다면 처음부터 끝까지 모든 페이지를 보고 찾아야 할 것이다.&lt;/li&gt;
  &lt;li&gt;INDEX의 장점
    &lt;ul&gt;
      &lt;li&gt;키 값을 기초로 하여 테이블에서 검색과 정렬 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;쿼리나 보고서에서 그룹화 작업의 속도를 향상시킨다.&lt;/li&gt;
      &lt;li&gt;인덱스를 사용하면 테이블 행의 공유성을 강화시킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;INDEX의 단점
    &lt;ul&gt;
      &lt;li&gt;인덱스를 만들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.mdb&lt;/code&gt;파일의 크기가 커진다.&lt;/li&gt;
      &lt;li&gt;여러 사용자가 사용하는 응용프로그램에서의 여러 사용자가 한 페이지를 동시에 수정할 수 있는 병행성이 줄어든다.&lt;/li&gt;
      &lt;li&gt;인덱스 된 필드에서 데이터를 업데이트하거나, 레코드를 추가 또는 삭제할 때 성능이 떨어진다.&lt;/li&gt;
      &lt;li&gt;인덱스가 데이터베이스 공간을 차지해 추가적인 공간이 필요해진다.(DB의 10퍼센트 내외의 공간이 추가로 필요)&lt;/li&gt;
      &lt;li&gt;데이터 변경 작업이 자주 일어날 경우에 인덱스를 재작성해야 할 필요가 있기에 성능에 영향을 끼칠 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DBMS
    &lt;ul&gt;
      &lt;li&gt;Data Base Management System&lt;/li&gt;
      &lt;li&gt;데이터베이스 관리 시스템(DBMS)은 다수의 사용자들이 데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합이다. DBMS는 사용자 또는 다른 프로그램의 요구를 처리하고 적절히 응답하여 데이터를 사용할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Balance Search Tree
    &lt;ul&gt;
      &lt;li&gt;트리구조의 높이를 작게 만들어 효율적으로 탐색할 수 있게끔 만든 구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MYD, MYI, FRM
    &lt;ul&gt;
      &lt;li&gt;MYD - Index정보가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;MYI - 실제 데이터가 들어가 있는 파일&lt;/li&gt;
      &lt;li&gt;FRM - 테이블 구조가 저장되어 있는 파일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DDL, DML, DCL
    &lt;ul&gt;
      &lt;li&gt;DDL - 데이터베이스의 스키마 객체를 생성, 변경, 제거하거나 권한의 부여나 박탈, 주석, 자료의 버림 등을 수행하는 문장의 집단을 의미한다.&lt;/li&gt;
      &lt;li&gt;DML - 스키마 객체의 데이터를 입력, 수정, 조회, 삭제 하거나 테이블에 잠금을 설정하거나 SQL문의 처리에 대한 절차에 대한 정보를 얻거나 PL/-SQL 모듈을 호출하는 작업의 집단이다.&lt;/li&gt;
      &lt;li&gt;DCL - 데이터를 제어하는 언어, 데이터의 보안, 무결성, 회복, 병행 수행제어 등을 정의하는데 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;osi-모델&quot;&gt;OSI 모델&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;각 단계별 설명&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;계층&lt;/th&gt;
          &lt;th&gt; &lt;/th&gt;
          &lt;th&gt;내용&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;7 계층&lt;/td&gt;
          &lt;td&gt;응용계층&lt;/td&gt;
          &lt;td&gt;사용자에게 네트워크 서비스를 제공한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;6 계층&lt;/td&gt;
          &lt;td&gt;표현계층&lt;/td&gt;
          &lt;td&gt;데이터의 형식을 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;5 계층&lt;/td&gt;
          &lt;td&gt;세션계층&lt;/td&gt;
          &lt;td&gt;데이터의 송수신의 순서 등을 관리한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4 계층&lt;/td&gt;
          &lt;td&gt;전송계층&lt;/td&gt;
          &lt;td&gt;신뢰성이 높은(에러가 적은)전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3 계층&lt;/td&gt;
          &lt;td&gt;네트워크계층&lt;/td&gt;
          &lt;td&gt;전송 규칙과 수신처를 결정한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2 계층&lt;/td&gt;
          &lt;td&gt;데이터링크계층&lt;/td&gt;
          &lt;td&gt;인접기기 사이의 데이터 전송을 제어한다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1 계층&lt;/td&gt;
          &lt;td&gt;물리계층&lt;/td&gt;
          &lt;td&gt;전기,기계적인 부분의 전송을 시행한다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향개발oop-4가지-특성&quot;&gt;객체지향개발(OOP) 4가지 특성&lt;/h3&gt;

&lt;p&gt;https://wayhome25.github.io/cs/2017/04/10/cs-11/&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html">면접 준비를 단순히 면접만 준비하기 위한 것이 아니라, 개발자로서 일하기 위해 알고 있어야할 기본 지식들을 잘 공부할 수 있는 기회로서 면접준비 시간을 가져갈 생각이다.</summary></entry><entry><title type="html">\‘하루 3분 네트워크 교실\’ 리뷰</title><link href="https://zooozoo.github.io/posts/2018-03-18-%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0/" rel="alternate" type="text/html" title="\'하루 3분 네트워크 교실\' 리뷰" /><published>2018-03-18T00:00:00+09:00</published><updated>2018-03-18T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-18-%ED%95%98%EB%A3%A83%EB%B6%84%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%20%EA%B5%90%EC%8B%A4%20%EB%A6%AC%EB%B7%B0/">&lt;p&gt;&lt;img src=&quot;https://zooozoo.github.io/assets/images/PreviewResize.jpeg&quot; alt=&quot;책&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OKKY에서 였나 비전공 신입 개발자에게 필요한 역량 1등으로 꼽았던게 네트워크에 관한 지식이었다. 사실 학원에서 공부할 때에 통 통신 원리에 대한 근원적인 궁금증은 있었지만, 그 궁금증을 해결해 줄 지식이 네트워크 공부에 있는지는 잘 모르고 있었다. 학원을 마치고 컴퓨터공학에 대해서 공부를 맛보기라도 해보자는 마음으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;커니핸 교수의 Hello Digital World&lt;/code&gt;라는 책을 읽었고, 책을 다 읽고 난 후에는 통신과 관련된 책도 꼭 읽어봐야겠다는 마음을 가지게 되었다. 누구에게 강의를 들을 수 있는 것이 아니었기 때문에 어떤책을 골라야 할 지 막막함이 있었는데 학원 강사님게서 추천해주신 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP완벽 가이드&lt;/code&gt;라는 책을 조금 들쳐봤을 때에는 도저히 바로 시작하면 챕터 1에서 나가떨어질 것만 같아서 다른 책을 찾는 와중에 리뷰의 주인공인 &lt;code class=&quot;highlighter-rouge&quot;&gt;하루 3분 네트워크 교실&lt;/code&gt;이라는 책을 발견하게 되었다.&lt;/p&gt;

&lt;p&gt;사실 유명한 책인지는 잘 모르겠다. 그냥 잠깐 봤는데 쉽게 설명하는 것 같아서 어려워도 그냥 여러번 읽다보면 잘 이해가 가겠지 싶어 집에 사왔다.&lt;/p&gt;

&lt;p&gt;결론부터 이야기 하자면 정말 좋은 책인 것 같다. 각 챕터의 연결이 잘 이루어져있고, 대화형식이라 지루하지 않다. 또한 중간중간 잊을 것 같은 내용들을 반복적으로 다시 알려주기 때문에 한번 읽으면서도 잘 이해할 수 있었다(물론난 다시 읽으며 복습했지만). 글로 잘 이해되지 않는 부분은 많은 도표로 쉽게 설명하는 부분도 이 책의 장점이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;책의 내용은 네트워크가 무엇인지에 대한 가장 기초적인 내용부터 시작해서  &lt;code class=&quot;highlighter-rouge&quot;&gt;OSI참조모델&lt;/code&gt;을 기반으로하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP/IP프로토콜군&lt;/code&gt;의 4계층 모델을 설명한다. 컴퓨터 네트워크의 기초와  &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP/IP&lt;/code&gt;기초를 설명한 책이라고 할 수 있겠다.&lt;/p&gt;

&lt;p&gt;나처럼 비전공자 이면서 웹프로그래밍 공부를 하는 와중에 네트워크 기초 부분에 대한 지식이 필요한데 너무 어렵게만 느껴져서 쉽게 다가가지 못하는 사람이 있다면 나는 이 책을 적극 추천할 생각이다.&lt;/p&gt;

&lt;p&gt;저자가 일본인인데 저자가 쓴 다른 책들도 있어서 혹시 번역된게 있으면 사서 볼려고 했는데 없어서 아쉬웠다. 이 책을 읽은 후에는 같은 출판사에서 쓴 &lt;code class=&quot;highlighter-rouge&quot;&gt;그림으로 배우는 HTTP Network Basic&lt;/code&gt;도 사서 읽어봤는데 http를 최대한 쉽게 설명하려고 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;하루 3분 네트워크 교실&lt;/code&gt;을 읽기 전에 먼저 읽었다면 조금 답답하게 읽었을 것 같다는 생각을 했었다.&lt;/p&gt;

&lt;p&gt;저자의 다른 책도 번역되서 나왔으면 좋겠다는 바람과 함께 리뷰를 마친다.&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="책리뷰" /><summary type="html">OKKY에서 였나 비전공 신입 개발자에게 필요한 역량 1등으로 꼽았던게 네트워크에 관한 지식이었다. 사실 학원에서 공부할 때에 통 통신 원리에 대한 근원적인 궁금증은 있었지만, 그 궁금증을 해결해 줄 지식이 네트워크 공부에 있는지는 잘 모르고 있었다.</summary></entry><entry><title type="html">Project-HP</title><link href="https://zooozoo.github.io/portfolio/project-hp/" rel="alternate" type="text/html" title="Project-HP" /><published>2018-03-08T00:00:00+09:00</published><updated>2018-03-08T00:00:00+09:00</updated><id>https://zooozoo.github.io/portfolio/project-hp</id><content type="html" xml:base="https://zooozoo.github.io/portfolio/project-hp/">&lt;h2 id=&quot;참고한-사이트-모음&quot;&gt;참고한 사이트 모음&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/546960/HTML-Quick-Start-Web-Application&quot;&gt;html 레이아웃 관련&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;프로젝트 Github : https://github.com/zooozoo/homepage-project&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Seok Hun Zoo</name></author><category term="portfolio" /><summary type="html">project portfolio</summary></entry><entry><title type="html">EXPLOG</title><link href="https://zooozoo.github.io/portfolio/explog/" rel="alternate" type="text/html" title="EXPLOG" /><published>2018-03-08T00:00:00+09:00</published><updated>2018-03-08T00:00:00+09:00</updated><id>https://zooozoo.github.io/portfolio/explog</id><content type="html" xml:base="https://zooozoo.github.io/portfolio/explog/">&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/n_dV5jrGEx4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트명 : Explog&lt;/li&gt;
  &lt;li&gt;기간 : 2017.11.27 – 2018.01.12&lt;/li&gt;
  &lt;li&gt;역할 : 배포 / User authentication / Push notification&lt;/li&gt;
  &lt;li&gt;내용 :자신만의 여행을 기록하고 기록한 사진과 글을 다른 사람과 함께 공유하는 여행기SNS 애플리케이션 입니다.&lt;/li&gt;
  &lt;li&gt;사용기술 : Django를 활용하여 Rest Framework API서버를 구축하였습니다. 배포는 AWS의 Elasticbeanstalk을 활용하였으며 NginX와 Docker를 활용하여 배포했습니다. Elasticbeanstalk의 기본 구성은 애플리케이션을 구동하는 EC2, RDS서버(Postgresql), 동적파일과 정적파일을 보관할 S3 Storage를 연동하여 배포하였으며 엘라스틱 로드벨런서를 통해서 동적으로 EC2서버를 확장할 수 있도록 되어있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zooozoo/Team-project&quot;&gt;프로젝트 Github : https://github.com/zooozoo/Team-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Seok Hun Zoo</name></author><category term="portfolio" /><summary type="html">project portfolio</summary></entry><entry><title type="html">if __name__ == “__main__”: 의미</title><link href="https://zooozoo.github.io/posts/2018-03-03-if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8/" rel="alternate" type="text/html" title="if __name__ == &quot;__main__&quot;: 의미" /><published>2018-03-03T00:00:00+09:00</published><updated>2018-03-03T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-03-if%20__name__%20==%20%22__main__%22:%20%EC%9D%98%EB%AF%B8/">&lt;h1 id=&quot;if-__name__--__main__-의미&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;: 의미&lt;/h1&gt;

&lt;p&gt;해당내용을 패스트캠퍼스 수업시간에 한번 들은적이 있는데 다시보면 헷갈리고 명확하게 개념을 이해하고 싶어서 구글검색을 감행했다.&lt;/p&gt;

&lt;p&gt;원래 처음의 생각은 검색으로 나온 정보를 내 언어로 다시 정리하려고 했다.(그래야 이해도 잘 되고, 내가 궁금한 부분을 명확하게 정리할 수 있기 때문이다)&lt;/p&gt;

&lt;p&gt;그러나 구글신은 이러한 나의 마음을 이미 알기라고 한듯 이미 미친듯이 잘 정리된 블로그를 소개해 주었다.&lt;/p&gt;

&lt;p&gt;그래도 내가 다시 정리하려고 했는데 다시보니 그 블로그 글을 똑같이 타이핑하는 것과 다름 없었다. 그래서 해당 블로그 글을 그대로 가져오고 출처를 남기기로 했다.&lt;/p&gt;

&lt;p&gt;그냥 링크만 남겨도 될 것 같지만 혹시나 그 글이 없어질 것을 염려했고, 내 저장소에 직접 남기고 싶었기 때문에 글을 복사해 왔다.&lt;/p&gt;

&lt;p&gt;아래는 해당 글과 링크&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;http://pinocc.tistory.com/175&quot;&gt;http://pinocc.tistory.com/175 [땅뚱 창고]&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고 : &lt;a href=&quot;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot;&gt;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​         &lt;a href=&quot;http://bytebaker.com/2008/07/30/python-namespaces/&quot;&gt;http://bytebaker.com/2008/07/30/python-namespaces/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파이썬 프로그래밍을 보다보면 아래와 같은 문장을 만나곤 한다. 정확하게 어떤 의미인지 알고 싶어 여기저기 검색한 내용을 정리했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 문장을 이해하기 위해서는 파이썬의 namespace 라는 개념을 이해해야 한다. namespace 를 얘기하기 이전에 파이썬에서 name(변수명)이 의미하는 것을 생각해보자.&lt;/p&gt;

&lt;p&gt;아래와 같이 파이썬에서는 name 에 값을 줄 수 있다. 그리고 값 뿐 아니라 function 과 같은 형태도 name 을 줄 수 있다. 또한 동일한 name을 재사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬에서 names는 파이썬 객체 시스템과 함께 간다고 생각하면 된다. 즉 integer, string, list 및 function 도 모두 파이썬에서는 객체형태로 표현되고, name은 그 객체에 접근하기 위해 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;namespace 와 module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;namespace 는 names 를 담을 수 있는 공간이라고 생각하면 된다. 파이썬에서 namespace 를 이해하기 위해서 파이썬 모듈에 대한 약간의 이해가 필요하다. 파이썬에서 module 은 파이썬 코드를 담고 있는 파일이다. 해당 파일에는 파이썬 클래스, 함수 또는 단순하게 names 의 리스트가 들어있을 수 있다.&lt;/p&gt;

&lt;p&gt;각 모듈은 자신만의 유일한 namespace 를 갖는다.(모듈의 namespace 이름은 보통 모듈의 파일이름과 같다.) 그래서 동일한 모듈내에서 동일한 이름을 가지는 클래스나 함수를 정의할 수 없다. 또한 모듈은 각각 완벽하게 독립적(isolated)이기 때문에(namespace 가 다르기 때문에), 두 모듈은 동일한 이름을 갖는 클래스나 함수를 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;import 와 namespace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;import 명령을 가지고 namespace 에 대해서 조금 더 알아보도록 하자. module 을 import 하는 방법은 여러가지가 있다. 방법에 따라 namespace 가 달라 질 수가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;import &lt;module_name&gt;&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;모듈을 import 하는 가장 간단한 방법이고, 일반적으로 추천되는 방법이다. 이렇게 import 를 하게 되면 module 의 name 을 prefix 로 사용함으로써 모듈의 namespace 에 접근할 수 있다.&lt;/p&gt;

    &lt;p&gt;아래 예제에서 sys 는 모듈 이름이고, path 는 sys 모듈의 namespace 에 담겨있는 name 이다. 따라서 path 에 접근을 하기 위해서는 모듈 이름인 sys 를 prefix 로 붙여서 sys 모듈의 namespace 에 접근한 후에 사용해야 한다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;idlelib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;python34.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DLLs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;site-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from &lt;module_name&gt; import &amp;lt;name,&amp;gt;&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;모듈의 namespace 에서 import 에서 지정된 name 들을 직접 가져오도록 한다. 이렇게 하게 되면 import 이후에 지정한 name 들은 module 의 name을 prefix 로 지정하지 않고도 접근이 가능하다. 하지만, 이 경우에 module 에서 import 된 이름과 main script 에서 지정된 이름이 동일한 경우, 나중에 정의되는 이름으로 대체되어서 이전 것에 접근이 불가능하게 된다.&lt;/p&gt;

    &lt;p&gt;단지 몇개의 name 만 필요하다고 명확하게 알고 있는 경우에 사용하는 것이 유용하다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;idlelib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;system32&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;python34.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DLLs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python34&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;site-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from &lt;module_name&gt; import *&lt;/module_name&gt;&lt;/p&gt;

    &lt;p&gt;2 와 동일하지만, module 에 있는 모든 name 을 직접 현재 namespace 로 가져오게 된다. 이렇게 되면 namespace 가 섞이게 되어서 일반적으로 사용을 권장하지 않는다. 차라리 첫번째 타입(1번)의 import 를 사용하는 것이 좋다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;__main__ namespace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;import 의 경우에 namespace 가 처리되는 것을 알아보았는데, import 가 아니고 파이썬 인터프리터가 최초로 파일을 읽어서 실행하는 경우를 살펴보자. 파이썬 인터프리터는 소스파일을 읽고, 그 안의 모든 코드를 실행하게 되는데, 코드를 실행하기 전에 특정한 변수값을 정의한다. 그중 하나가 &lt;strong&gt;name&lt;/strong&gt; 이라는 변수를 &lt;strong&gt;main&lt;/strong&gt; 으로 세팅을 한다.&lt;/p&gt;

&lt;p&gt;즉 python script.py 와 같이 직접 쉘에서 실행하는 경우에는 파이썬 인터프리터가 해당 script.py 모듈을 script 라는 namespace 가 아닌__main__ 이라는 namespace 로 간주하여 다루게 된다.&lt;/p&gt;

&lt;p&gt;따라서 처음에 궁금했던 아래 문장은 ‘만일 이 파일이 인터프리터에 의해서 실행되는 경우라면’ 이라는 의미를 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;즉 본인이 구현한 코드가 다른 파이썬 코드에 의해서 모듈로 import 될 경우도 있을 수 있고, 파이썬 인터프리터에 의해서 직접 실행될 경우도 있을 수 있는데, 위 코드는 인터프리터에 의해서 직접 실행될 경우에만 실행하도록 하고 싶은 코드 블럭이 있는 경우에 사용한다.&lt;/p&gt;

&lt;p&gt;아래 예제 코드와 결과를 보면 이해하기 쉽다.&lt;/p&gt;

&lt;p&gt;(참고: &lt;a href=&quot;http://ibiblio.org/g2swap/byteofpython/read/module-name.html&quot;&gt;http://ibiblio.org/g2swap/byteofpython/read/module-name.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Filename: using_name.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'This program is being run by itself'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'I am being imported from another module'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;output&gt;

```
This program is being run by itself
$ python using_name.py

$ python
&amp;gt;&amp;gt;&amp;gt; import using_name
I am being imported from another module
&amp;gt;&amp;gt;&amp;gt;

```
&lt;/output&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="python" /><summary type="html">해당내용을 패스트캠퍼스 수업시간에 한번 들은적이 있는데 다시보면 헷갈리고 명확하게 개념을 이해하고 싶어서 구글검색을 감행했다.</summary></entry><entry><title type="html">URL과 URI</title><link href="https://zooozoo.github.io/posts/2018-03-03-URL%EA%B3%BCURI/" rel="alternate" type="text/html" title="URL과 URI" /><published>2018-03-03T00:00:00+09:00</published><updated>2018-03-03T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/URL%EA%B3%BCURI</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-03-03-URL%EA%B3%BCURI/">&lt;h1 id=&quot;url과-uri&quot;&gt;URL과 URI&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;그림으로 배우는 http &amp;amp; network basic&lt;/code&gt;을 공부하다가 URL과 URI에 대한 이야기가 나와서 해당 내용에 대한 정확한 개념을 잡고 기록으로 남겨놓으려 한다. (물론 구글에 치면 진짜 잘나온다…)&lt;/p&gt;

&lt;p&gt;먼저 무엇에 대한 약자인지 알아봅시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL - Uniform Resource Locator&lt;/li&gt;
  &lt;li&gt;URI - Uniform Resource Identifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문자 그대로 해석해 보자면 URL은 “정형화된 리소스 위치표시” 라고 할 수 있고, URI는 “젖형화된 리소스 식별자”라고 할 수 있겠다.&lt;/p&gt;

&lt;p&gt;먼저 위키백과에 URI를 검색하면 아래와 같이 나온다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;통합 자원 식별자&lt;/strong&gt;(Uniform Resource Identifier, &lt;strong&gt;URI&lt;/strong&gt;)는 인터넷에 있는 자원을 나타내는 유일한 주소이다. URI의 존재는 인터넷에서 요구되는 기본조건으로서 인터넷 프로토콜에 항상 붙어 다닌다.&lt;/p&gt;

  &lt;p&gt;역사&lt;/p&gt;

  &lt;p&gt;URI와 URL은 역사를 함께 공유한다. 1994년 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%8C%80_%EB%B2%84%EB%84%88%EC%8A%A4_%EB%A6%AC&quot;&gt;팀 버너스 리&lt;/a&gt;가 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%98%EC%9D%B4%ED%8D%BC%ED%85%8D%EC%8A%A4%ED%8A%B8&quot;&gt;하이퍼텍스트&lt;/a&gt;[&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90#cite_note-FOOTNOTEPalmer2001-1&quot;&gt;1]&lt;/a&gt;를 제안하면서 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC&quot;&gt;하이퍼링크&lt;/a&gt;의 대상이 되는 자원을 대표하는 짧은 문자열로 URL의 개념을 암묵적으로 도입하였다. 당시 사람들은 이를 “하이퍼텍스트 이름”[&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90#cite_note-FOOTNOTEW3C1992-2&quot;&gt;2]&lt;/a&gt; 또는 “문서 이름”으로 불렀다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;큰 의미로 보자면 그게 그말이다.&lt;/p&gt;

&lt;p&gt;URI가 가장 상위집합이라고 할 수 있고 그 안에 URL이나 URN과 같은 개념이 있다고 생각하면 되겠다.&lt;/p&gt;

&lt;p&gt;의미상으로도 리소스의 위치를표시하는 것의 목적이 결국엔 리소스를 식별해 나가는 것이므로 단어의 해석만으로도 관련내용을 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;조금만 더 자세히 들어가자면 이전에는 URL이 가리키는게 파일 리소스 였는데, 요즘은 Rewrite 등의 Apache , IIS, Tomcat 핸들러 때문에 이를 자원 이라고 부른다. (여기부터 조금 잘 모르는 내용이긴 한데 Apache를 비롯한 웹서버가 생겨나면서 부터 파일 리소스가 -&amp;gt; 자원의 개념으로 다뤄졌던 것 같다.)&lt;/p&gt;

&lt;p&gt;이전에는 요청하는 주소가 실제의 파일이나 폴더트리였다면 요즘은 그냥 해당 자원을 가리키는 구분자로서의 역할을 한다는 것.&lt;/p&gt;

&lt;p&gt;알고보면 그렇게 어렵거나 한 개념은 아니지만 웹 기술의 발전이 어떻게 이루어 졌는지에 대한 한 조각을 할 수 있는 부분인 것 같다.&lt;/p&gt;

&lt;p&gt;(참고한 글)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.lael.be/post/61&quot;&gt;https://blog.lael.be/post/61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%86%B5%ED%95%A9_%EC%9E%90%EC%9B%90_%EC%8B%9D%EB%B3%84%EC%9E%90&quot;&gt;위키백과&lt;/a&gt;&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="network" /><summary type="html">`그림으로 배우는 http &amp; network basic`을 공부하다가 URL과 URI에 대한 이야기가 나와서 해당 내용에 대한 정확한 개념을 잡고 기록으로 남겨놓으려 한다. (물론 구글에 치면 진짜 잘나온다...)</summary></entry><entry><title type="html">Spanning multi-valued relationships</title><link href="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/" rel="alternate" type="text/html" title="Spanning multi-valued relationships" /><published>2018-01-24T00:00:00+09:00</published><updated>2018-01-24T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/Django_Spanning%20multi-valued%20relationships</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/">&lt;p&gt;장고의 모델 문서를 공부하다가&lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;(Making Queries)&lt;/a&gt; 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하… 내 시간…)&lt;/p&gt;

&lt;p&gt;해당 내용을 이미 알고 있고 스압을 느끼신다면 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 의 답변&lt;/a&gt;으로 바로 가보시길…&lt;/p&gt;

&lt;p&gt;해당 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spanning multi-valued relationships&lt;/code&gt; 라는 부분인데 ForeignKey나 Many-to-Many관계에있는 모델중에서 관계된 모델을 조건으로 해서 filtering 하는 내용이다.&lt;/p&gt;

&lt;p&gt;장고 문서에서는 아래의 모델을 기준으로 설명한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tagline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mod_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_pingbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 모델은 Blog (일) &amp;lt; - &amp;gt; (다) Entry &amp;lt; - &amp;gt; (다)Author 의 관계를 가지고 있다.&lt;/p&gt;

&lt;p&gt;다음은 장고 문서에서 설명하는 내용&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To handle both of these situations, Django has a consistent way of processing &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls. Everything inside a single &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call is applied simultaneously to filter out items matching all those requirements. Successive &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call.&lt;/p&gt;

  &lt;p&gt;That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both &lt;em&gt;“Lennon”&lt;/em&gt; in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;To select all blogs that contain an entry with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline &lt;strong&gt;as well as&lt;/strong&gt; an entry that was published in 2008, we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Suppose there is only one blog that had both entries containing &lt;em&gt;“Lennon”&lt;/em&gt; and entries from 2008, but that none of the entries from 2008 contained &lt;em&gt;“Lennon”&lt;/em&gt;. The first query would not return any blogs, but the second query would return that one blog.&lt;/p&gt;

  &lt;p&gt;In the second example, the first filter restricts the queryset to all those blogs linked to entries with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline. The second filter restricts the set of blogs &lt;em&gt;further&lt;/em&gt; to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blog&lt;/code&gt; items with each filter statement, not the &lt;code class=&quot;highlighter-rouge&quot;&gt;Entry&lt;/code&gt; items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;요약해서 설명하자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같이 필터 안에 여러개의 조건을 써서 찾는 것과&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로(chaining) 필터를 나눠서 각각 찾는것이 다른 결과를 가지며 그 이유는 결과가 Entry를 탐색하는 것이 아닌  Blog를 탐색하는 것이기 때문이라고 설명하고 있다.&lt;/p&gt;

&lt;p&gt;두 번째 예시가 잘 이해되지 않았는데 만약 첫번째 filter로 blog 객체를 추려낸 후에 해당 결과를 가지고 두 번째 filter를 적용하면 어떻게 하든 첫 번째 예시와 같은 결과를 할 것 같다. 결국에 돌고 돌아 stackoverflow를 통해 내용을 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;누군가 나랑 똑같은 질문을 stackoverflow에 했고 아주 상세한 설명이 있어서 덕분해 잘 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;장고에 있는 문서보다는 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 에 예시&lt;/a&gt;로 쓰여진 내용이 훨씬 잘 이해 된다.&lt;/p&gt;

&lt;p&gt;아래는 해당 답변 내용이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The case in which results of “multiple arguments filter-query” is different then “chained-filter-query”, following:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Selecting referenced objects on the basis of referencing objects and relationship is one-to-many (or many-to-many).&lt;/p&gt;

    &lt;p&gt;Multiple filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  same referencing model   ^^                ^^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Chained filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Both queries can output different result:
If more then one rows in referencing-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt;can refer to same row in referenced-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;. This can be the case in &lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt; have either 1:N (one to many) or N:M (many to many) relation-ship.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Example:&lt;/p&gt;

  &lt;p&gt;Consider my application &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; has two models &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt;. An employee in &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; can have more than dependents(in other-words a dependent can be son/daughter of a single employee, while a employee can have more than one son/daughter).
Ehh, assuming like husband-wife both can’t work in a &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt;. I took 1:m example&lt;/p&gt;

  &lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; is referenced-model that can be referenced by more then &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt; that is referencing-model. Now consider relation-state as follows:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee:        Dependent:
+------+        +------+--------+-------------+--------------+
| name |        | name | E-name | school_mark | college_mark |
+------+        +------+--------+-------------+--------------+
| A    |        | a1   |   A    |          79 |           81 |
| B    |        | b1   |   B    |          80 |           60 |
+------+        | b2   |   B    |          68 |           86 |
                +------+--------+-------------+--------------+  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt;refers to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, and dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;b1, b2&lt;/code&gt;references to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Now my query is:&lt;/p&gt;

  &lt;p&gt;Find all employees those having son/daughter has distinction marks (say &amp;gt;= 75%) in both college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Output is ‘A’ dependent ‘a1’ has distinction marks in both college and school is dependent on employee ‘A’. Note ‘B’ is not selected because nether of ‘B’’s child has distinction marks in both college and school. Relational algebra:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75 AND college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;In Second, case I need a query:&lt;/p&gt;

  &lt;p&gt;Find all employees whose some of dependents has distinction marks in college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;This time ‘B’ also selected because ‘B’ has two children (more than one!), one has distinction mark in school ‘b1’ and other is has distinction mark in college ‘b2’.
Order of filter doesn’t matter we can also write above query as:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;result is same! Relational algebra can be:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;(Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75)Dependent) &lt;strong&gt;⋈&lt;/strong&gt;(college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Note following:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dq1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Outputs same result: &lt;code class=&quot;highlighter-rouge&quot;&gt;[&amp;lt;Dependent: a1&amp;gt;]&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;I check target SQL query generated by Django using &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd1.query&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd2.query&lt;/code&gt;both are same(Django 1.6).&lt;/p&gt;

  &lt;p&gt;But semantically both are different to &lt;em&gt;me&lt;/em&gt;. first looks like simple section σ&lt;a href=&quot;Dependent&quot;&gt;school_mark &amp;gt;= 75 AND college_mark &amp;gt;= 75&lt;/a&gt; and second like slow nested query: σ&lt;a href=&quot;σ[college_mark &amp;gt;= 75](Dependent)&quot;&gt;school_mark &amp;gt;= 75&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;If one need &lt;a href=&quot;http://codepad.org/c6VODLRf&quot;&gt;Code @codepad&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;btw, it is given in documentation @&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;Spanning multi-valued relationships&lt;/a&gt; I have just added an example, I think it will be helpful for someone new.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스택오버플로우에 올라온 답변을 요약해 보자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 필터링은 dependent에서 두개의 조건을 동시에 만족하는 Employee를 찾는 것 이므로 결과는 Employee A가 된다.&lt;/p&gt;

&lt;p&gt;반면에&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 경우 첫번째 필터에서 걸러지는 내용은 Employee A, B 가 된다.(왜냐하면 dependent 의 a1과 b1이 조건을 만족했기 때문이다. ) 두번째 필터가 포인트 인데 두번째 필터에서 college_mark가 75점 이상인 dependent를 가지고 있는 Employee를 다시 찾게되고 그 결과값도 Employee A, B가 된다. 왜냐하면 첫번째 필터에서 걸러진 후의 결과는 Employee A, B 이고 두번째 필터는 이 중에서 다시 college_mark가 75점 이상인 경우를 찾아내는 것인데  Employee B의 경우 college_mark가 75점 이상인 dependent b2 를 가지고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;즉 Employee B는 college_mark와 school_mark가 동시에 75점 이상인 dependent를 가지고 있지 않지만, school_mark가 75점 이상인 dependent b1과 college_mark가 75점 이상인 dependent b2 이렇게 두개의 dependent를 가지고 있기 때문에 두 번째 필터에서도 해당 조건을 만족하는 것 이다.&lt;/p&gt;

&lt;p&gt;언뜻 생각하기에 혼동되는 부분이 두번째 필터를 생각할 때 dependent를 기준으로 생각하기 때문이다. 첫번째 필터에서 해당되는 dependent가 a1과 b1 이기 때문에 두번 째 필터에서 dependent a1, b1 이렇게 2개를 기준으로 필터링 해야할 것 같지만 Employee 기준으로 생각하면 첫번째 필터의 결과는 해당조건을 만족하는 dependent와 연결된 Employee가 되기 때문에  필터를 하기 전 과 후는 같은 상황이 된다.&lt;/p&gt;

&lt;p&gt;이해하고 다시 적은 내용이지만 다시 생각해 봐도 글로 설명하는 것 보다 예시를 통해 이해하는 편이 훨씬 도움이 되는 듯 하다.&lt;/p&gt;

&lt;p&gt;잘 이해가 안된다면 stackoverflow의 답변을 차근차근 읽어내려 간다면 충분히 이해할 수 있을 것 같다.&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="django" /><summary type="html">장고의 모델 문서를 공부하다가[(Making Queries)](https://docs.djangoproject.com/ko/1.11/topics/db/queries/#spanning-multi-valued-relationships) 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하... 내 시간...)</summary></entry><entry><title type="html">전문가를 위한 파이썬</title><link href="https://zooozoo.github.io/records/2018-01-23-Fluent_Python/" rel="alternate" type="text/html" title="전문가를 위한 파이썬" /><published>2018-01-23T00:00:00+09:00</published><updated>2018-01-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/Fluent_Python</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-01-23-Fluent_Python/"></content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html"></summary></entry><entry><title type="html">4월09일~4월13일</title><link href="https://zooozoo.github.io/til/2018-01-22-4%EC%9B%9409%EC%9D%BC~4%EC%9B%9413%EC%9D%BC/" rel="alternate" type="text/html" title="4월09일~4월13일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/4%EC%9B%9409%EC%9D%BC~4%EC%9B%9413%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-4%EC%9B%9409%EC%9D%BC~4%EC%9B%9413%EC%9D%BC/">&lt;h2 id=&quot;4월-09일-월요일&quot;&gt;4월 09일 월요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘 문제 풀이 &lt;a href=&quot;https://github.com/zooozoo/algorithm&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 사이언스 부트캠프 with 파이썬 독서 2회독 (5장까지)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4월-10일-화요일&quot;&gt;4월 10일 화요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개인 홈페이지 프로젝트&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 사이언스 부트캠프 with 파이썬 독서 2회독 (6장까지)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4월-11일-수요일&quot;&gt;4월 11일 수요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개인 홈페이지 프로젝트&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 사이언스 부트캠프 with 파이썬 독서 2회독 (7장 중반까지)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">4월 09일 월요일</summary></entry><entry><title type="html">4월02일~4월06일</title><link href="https://zooozoo.github.io/til/2018-01-22-4%EC%9B%9402%EC%9D%BC~4%EC%9B%9406%EC%9D%BC/" rel="alternate" type="text/html" title="4월02일~4월06일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/4%EC%9B%9402%EC%9D%BC~4%EC%9B%9406%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-4%EC%9B%9402%EC%9D%BC~4%EC%9B%9406%EC%9D%BC/">&lt;h2 id=&quot;4월-02일-월요일&quot;&gt;4월 02일 월요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘 문제 풀이 &lt;a href=&quot;https://github.com/zooozoo/algorithm&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 사이언스 부트캠프 with 파이썬 독서 5장까지&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4월-03일-화요일&quot;&gt;4월 03일 화요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘 문제 풀이 &lt;a href=&quot;https://github.com/zooozoo/algorithm&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;개인 홈페이지 프로젝트&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4월-04일-수요일&quot;&gt;4월 04일 수요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘 문제 풀이 &lt;a href=&quot;https://github.com/zooozoo/algorithm&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;개인 홈페이지 프로젝트&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 사이언스 부트캠프 with 파이썬 독서 12장까지&lt;/li&gt;
  &lt;li&gt;css 강의자료 복습 -&amp;gt; 개인 홈페이지에 적용 하기 위해서&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4월-05일-목요일&quot;&gt;4월 05일 목요일&lt;/h2&gt;

&lt;p&gt;오늘 한일&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘 문제 풀이 &lt;a href=&quot;https://github.com/zooozoo/algorithm&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;개인 홈페이지 프로젝트&lt;a href=&quot;https://github.com/zooozoo/homepage-project&quot;&gt;(git hub)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">4월 02일 월요일</summary></entry></feed>