<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="https://zooozoo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zooozoo.github.io/" rel="alternate" type="text/html" /><updated>2018-02-12T23:03:08+09:00</updated><id>https://zooozoo.github.io/</id><title type="html">Record|Organize|Make it mine</title><subtitle>My programming study blog and I hope it help someone who struggling with code</subtitle><author><name>Seok Hun Zoo</name></author><entry><title type="html">Spanning multi-valued relationships</title><link href="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/" rel="alternate" type="text/html" title="Spanning multi-valued relationships" /><published>2018-01-24T00:00:00+09:00</published><updated>2018-01-24T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/Django_Spanning%20multi-valued%20relationships</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/">&lt;p&gt;장고의 모델 문서를 공부하다가&lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;(Making Queries)&lt;/a&gt; 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하… 내 시간…)&lt;/p&gt;

&lt;p&gt;해당 내용을 이미 알고 있고 스압을 느끼신다면 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 의 답변&lt;/a&gt;으로 바로 가보시길…&lt;/p&gt;

&lt;p&gt;해당 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spanning multi-valued relationships&lt;/code&gt; 라는 부분인데 ForeignKey나 Many-to-Many관계에있는 모델중에서 관계된 모델을 조건으로 해서 filtering 하는 내용이다.&lt;/p&gt;

&lt;p&gt;장고 문서에서는 아래의 모델을 기준으로 설명한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tagline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mod_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_pingbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 모델은 Blog (일) &amp;lt; - &amp;gt; (다) Entry &amp;lt; - &amp;gt; (다)Author 의 관계를 가지고 있다.&lt;/p&gt;

&lt;p&gt;다음은 장고 문서에서 설명하는 내용&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To handle both of these situations, Django has a consistent way of processing &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls. Everything inside a single &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call is applied simultaneously to filter out items matching all those requirements. Successive &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier &lt;a href=&quot;https://docs.djangoproject.com/ko/1.11/ref/models/querysets/#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/a&gt; call.&lt;/p&gt;

  &lt;p&gt;That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both &lt;em&gt;“Lennon”&lt;/em&gt; in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;To select all blogs that contain an entry with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline &lt;strong&gt;as well as&lt;/strong&gt; an entry that was published in 2008, we would write:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Suppose there is only one blog that had both entries containing &lt;em&gt;“Lennon”&lt;/em&gt; and entries from 2008, but that none of the entries from 2008 contained &lt;em&gt;“Lennon”&lt;/em&gt;. The first query would not return any blogs, but the second query would return that one blog.&lt;/p&gt;

  &lt;p&gt;In the second example, the first filter restricts the queryset to all those blogs linked to entries with &lt;em&gt;“Lennon”&lt;/em&gt; in the headline. The second filter restricts the set of blogs &lt;em&gt;further&lt;/em&gt; to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the &lt;code class=&quot;highlighter-rouge&quot;&gt;Blog&lt;/code&gt; items with each filter statement, not the &lt;code class=&quot;highlighter-rouge&quot;&gt;Entry&lt;/code&gt; items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;요약해서 설명하자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같이 필터 안에 여러개의 조건을 써서 찾는 것과&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로(chaining) 필터를 나눠서 각각 찾는것이 다른 결과를 가지며 그 이유는 결과가 Entry를 탐색하는 것이 아닌  Blog를 탐색하는 것이기 때문이라고 설명하고 있다.&lt;/p&gt;

&lt;p&gt;두 번째 예시가 잘 이해되지 않았는데 만약 첫번째 filter로 blog 객체를 추려낸 후에 해당 결과를 가지고 두 번째 filter를 적용하면 어떻게 하든 첫 번째 예시와 같은 결과를 할 것 같다. 결국에 돌고 돌아 stackoverflow를 통해 내용을 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;누군가 나랑 똑같은 질문을 stackoverflow에 했고 아주 상세한 설명이 있어서 덕분해 잘 이해할 수 있었다.&lt;/p&gt;

&lt;p&gt;장고에 있는 문서보다는 &lt;a href=&quot;https://stackoverflow.com/questions/5542874/difference-between-filter-with-multiple-arguments-and-chain-filter-in-django&quot;&gt;stackoverflow 에 예시&lt;/a&gt;로 쓰여진 내용이 훨씬 잘 이해 된다.&lt;/p&gt;

&lt;p&gt;아래는 해당 답변 내용이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The case in which results of “multiple arguments filter-query” is different then “chained-filter-query”, following:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Selecting referenced objects on the basis of referencing objects and relationship is one-to-many (or many-to-many).&lt;/p&gt;

    &lt;p&gt;Multiple filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  same referencing model   ^^                ^^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Chained filters:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referencing1_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Both queries can output different result:
If more then one rows in referencing-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt;can refer to same row in referenced-model&lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;. This can be the case in &lt;code class=&quot;highlighter-rouge&quot;&gt;Referenced&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing1&lt;/code&gt; have either 1:N (one to many) or N:M (many to many) relation-ship.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Example:&lt;/p&gt;

  &lt;p&gt;Consider my application &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; has two models &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt;. An employee in &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt; can have more than dependents(in other-words a dependent can be son/daughter of a single employee, while a employee can have more than one son/daughter).
Ehh, assuming like husband-wife both can’t work in a &lt;code class=&quot;highlighter-rouge&quot;&gt;my_company&lt;/code&gt;. I took 1:m example&lt;/p&gt;

  &lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; is referenced-model that can be referenced by more then &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependent&lt;/code&gt; that is referencing-model. Now consider relation-state as follows:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Employee:        Dependent:
+------+        +------+--------+-------------+--------------+
| name |        | name | E-name | school_mark | college_mark |
+------+        +------+--------+-------------+--------------+
| A    |        | a1   |   A    |          79 |           81 |
| B    |        | b1   |   B    |          80 |           60 |
+------+        | b2   |   B    |          68 |           86 |
                +------+--------+-------------+--------------+  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;a1&lt;/code&gt;refers to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, and dependent&lt;code class=&quot;highlighter-rouge&quot;&gt;b1, b2&lt;/code&gt;references to employee&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Now my query is:&lt;/p&gt;

  &lt;p&gt;Find all employees those having son/daughter has distinction marks (say &amp;gt;= 75%) in both college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Output is ‘A’ dependent ‘a1’ has distinction marks in both college and school is dependent on employee ‘A’. Note ‘B’ is not selected because nether of ‘B’’s child has distinction marks in both college and school. Relational algebra:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75 AND college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;In Second, case I need a query:&lt;/p&gt;

  &lt;p&gt;Find all employees whose some of dependents has distinction marks in college and school?&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;This time ‘B’ also selected because ‘B’ has two children (more than one!), one has distinction mark in school ‘b1’ and other is has distinction mark in college ‘b2’.
Order of filter doesn’t matter we can also write above query as:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;result is same! Relational algebra can be:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;(Employee &lt;strong&gt;⋈&lt;/strong&gt;(school_mark &amp;gt;=75)Dependent) &lt;strong&gt;⋈&lt;/strong&gt;(college_mark&amp;gt;=75)Dependent&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Note following:&lt;/p&gt;

  &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dq1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Outputs same result: &lt;code class=&quot;highlighter-rouge&quot;&gt;[&amp;lt;Dependent: a1&amp;gt;]&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;I check target SQL query generated by Django using &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd1.query&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;print qd2.query&lt;/code&gt;both are same(Django 1.6).&lt;/p&gt;

  &lt;p&gt;But semantically both are different to &lt;em&gt;me&lt;/em&gt;. first looks like simple section σ&lt;a href=&quot;Dependent&quot;&gt;school_mark &amp;gt;= 75 AND college_mark &amp;gt;= 75&lt;/a&gt; and second like slow nested query: σ&lt;a href=&quot;σ[college_mark &amp;gt;= 75](Dependent)&quot;&gt;school_mark &amp;gt;= 75&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;If one need &lt;a href=&quot;http://codepad.org/c6VODLRf&quot;&gt;Code @codepad&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;btw, it is given in documentation @&lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships&quot;&gt;Spanning multi-valued relationships&lt;/a&gt; I have just added an example, I think it will be helpful for someone new.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스택오버플로우에 올라온 답변을 요약해 보자면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 필터링은 dependent에서 두개의 조건을 동시에 만족하는 Employee를 찾는 것 이므로 결과는 Employee A가 된다.&lt;/p&gt;

&lt;p&gt;반면에&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__school_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;dependent__college_mark__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 경우 첫번째 필터에서 걸러지는 내용은 Employee A, B 가 된다.(왜냐하면 dependent 의 a1과 b1이 조건을 만족했기 때문이다. ) 두번째 필터가 포인트 인데 두번째 필터에서 college_mark가 75점 이상인 dependent를 가지고 있는 Employee를 다시 찾게되고 그 결과값도 Employee A, B가 된다. 왜냐하면 첫번째 필터에서 걸러진 후의 결과는 Employee A, B 이고 두번째 필터는 이 중에서 다시 college_mark가 75점 이상인 경우를 찾아내는 것인데  Employee B의 경우 college_mark가 75점 이상인 dependent b2 를 가지고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;즉 Employee B는 college_mark와 school_mark가 동시에 75점 이상인 dependent를 가지고 있지 않지만, school_mark가 75점 이상인 dependent b1과 college_mark가 75점 이상인 dependent b2 이렇게 두개의 dependent를 가지고 있기 때문에 두 번째 필터에서도 해당 조건을 만족하는 것 이다.&lt;/p&gt;

&lt;p&gt;언뜻 생각하기에 혼동되는 부분이 두번째 필터를 생각할 때 dependent를 기준으로 생각하기 때문이다. 첫번째 필터에서 해당되는 dependent가 a1과 b1 이기 때문에 두번 째 필터에서 dependent a1, b1 이렇게 2개를 기준으로 필터링 해야할 것 같지만 Employee 기준으로 생각하면 첫번째 필터의 결과는 해당조건을 만족하는 dependent와 연결된 Employee가 되기 때문에  필터를 하기 전 과 후는 같은 상황이 된다.&lt;/p&gt;

&lt;p&gt;이해하고 다시 적은 내용이지만 다시 생각해 봐도 글로 설명하는 것 보다 예시를 통해 이해하는 편이 훨씬 도움이 되는 듯 하다.&lt;/p&gt;

&lt;p&gt;잘 이해가 안된다면 stackoverflow의 답변을 차근차근 읽어내려 간다면 충분히 이해할 수 있을 것 같다.&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="django" /><summary type="html">장고의 모델 문서를 공부하다가(Making Queries) 이전에 패캠에서 수업들을 때 한번 이해 했던 내용인데 다시보니 너무 헷갈려서 폭풍써치를 감행했고 비로소 이해를 하게 되었다. (하… 내 시간…)</summary></entry><entry><title type="html">전문가를 위한 파이썬</title><link href="https://zooozoo.github.io/records/2018-01-23-Fluent_Python/" rel="alternate" type="text/html" title="전문가를 위한 파이썬" /><published>2018-01-23T00:00:00+09:00</published><updated>2018-01-23T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/Fluent_Python</id><content type="html" xml:base="https://zooozoo.github.io/records/2018-01-23-Fluent_Python/"></content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html"></summary></entry><entry><title type="html">2월12일~2월18일</title><link href="https://zooozoo.github.io/til/2018-01-22-2%EC%9B%9412%EC%9D%BC~2%EC%9B%9418%EC%9D%BC/" rel="alternate" type="text/html" title="2월12일~2월18일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/2%EC%9B%9412%EC%9D%BC~2%EC%9B%9418%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-2%EC%9B%9412%EC%9D%BC~2%EC%9B%9418%EC%9D%BC/">&lt;h3 id=&quot;2월-12일-월요일&quot;&gt;2월 12일 월요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;커니핸 교수의 Hello, Digital World 복습(잽터4 - 챕터7: 소프트웨어)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">2월 12일 월요일</summary></entry><entry><title type="html">2월05일~2월11일</title><link href="https://zooozoo.github.io/til/2018-01-22-2%EC%9B%9405%EC%9D%BC~2%EC%9B%9411%EC%9D%BC/" rel="alternate" type="text/html" title="2월05일~2월11일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/2%EC%9B%9405%EC%9D%BC~2%EC%9B%9411%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-2%EC%9B%9405%EC%9D%BC~2%EC%9B%9411%EC%9D%BC/">&lt;h3 id=&quot;2월-06일-화요일&quot;&gt;2월 06일 화요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음시작하는 파이썬 6장~7장 복습&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2월-07일-수요일&quot;&gt;2월 07일 수요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음시작하는 파이썬 7장~12장 복습(완료)
이전에는 6장까지 주로 공부했었는데, 이번에 전체를 다시 복습하면서 1장부터 6장까지의 내용중에서도 또 새롭게 알게되거나 더 잘 이해할 수 있었던 부분이 많았다. 
나머지 부분에서는 네트워크나, 비동기처리, 테스트나 여러가지 모듈을 사용하는 방법들이 기억에 남았다. 이전에 6장 이후의 내용들을 봤을 때에는 전혀 이해가 되지 않던 것 들이 이번에 복습하면서 잘 이해할 수 있었고, 또 어떤 부분에서는 아직도 잘 이해되지 않는 부분도 남아있었다. 소켓 프로그래밍, 비동기처리, 테스트 부분은 따로 더 많은내용을 찾아봐야겠다는 생각을 하게되었다.&lt;/li&gt;
  &lt;li&gt;TDD 복습
기본세팅 완료&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2월-08일-목요일&quot;&gt;2월 08일 목요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;커니핸 교수의 Hello, Digital World 복습(처음~챕터3: 하드웨어)&lt;/li&gt;
  &lt;li&gt;TDD 클린 코드를 위한 테스트 주도 개발(처음~챕터4장)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">2월 06일 화요일</summary></entry><entry><title type="html">1월29일~2월04일</title><link href="https://zooozoo.github.io/til/2018-01-22-1%EC%9B%9429%EC%9D%BC~2%EC%9B%9404%EC%9D%BC/" rel="alternate" type="text/html" title="1월29일~2월04일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/1%EC%9B%9429%EC%9D%BC~2%EC%9B%9404%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-1%EC%9B%9429%EC%9D%BC~2%EC%9B%9404%EC%9D%BC/">&lt;h3 id=&quot;1월-30일-화요일&quot;&gt;1월 30일 화요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Try-Django-Tutorial youtube 강의 42커밋까지 완료&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-31일-수요일&quot;&gt;1월 31일 수요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Try-Django-Tutorial youtube 강의 45커밋까지 완료 -&amp;gt; 완성&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2월-01일-목요일&quot;&gt;2월 01일 목요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음시작하는 파이썬 복습 135p&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2월-02일-금요일&quot;&gt;2월 02일 금요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음시작하는 파이썬 복습
클로져(closure)와 데커레이터(decorator)에 대해서 제대로 이해할 수 있었다.
    &lt;ul&gt;
      &lt;li&gt;참고한 블로그 링크
&lt;a href=&quot;http://schoolofweb.net/blog/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%A1%9C%EC%A0%80-closure/&quot;&gt;클로져(closure)&lt;/a&gt;
&lt;a href=&quot;http://schoolofweb.net/blog/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-decorator/&quot;&gt;데커레이커(decorator)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;결론적으로는 파이썬의 내부함수와, 클로져를 잘 이해하고 있어야 데커레이터를 이해할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">1월 30일 화요일</summary></entry><entry><title type="html">1월22일~28일</title><link href="https://zooozoo.github.io/til/2018-01-22-1%EC%9B%9422%EC%9D%BC~28%EC%9D%BC/" rel="alternate" type="text/html" title="1월22일~28일" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/1%EC%9B%9422%EC%9D%BC~28%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-22-1%EC%9B%9422%EC%9D%BC~28%EC%9D%BC/">&lt;h3 id=&quot;1월-22일-월요일&quot;&gt;1월 22일 월요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Try-Django-Tutorial youtube 강의 9커밋까지 완료&lt;/li&gt;
  &lt;li&gt;하루3분 네트워크 독서&lt;/li&gt;
  &lt;li&gt;블로그 정리
    &lt;ul&gt;
      &lt;li&gt;about page 내용 작성 및 records 내용 정리
-&amp;gt; 이전부터 쭉 작성해 왔던 것들인데 미완성 된 부분도 있고 구성에 일관성이 없어서 한번 다시 쭉 정리해야할 필요성을 느낌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-23일-화요일&quot;&gt;1월 23일 화요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Try-Django-Tutorial youtube 강의 17커밋까지 완료&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;class based view&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;template include, extends&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;model&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Model 에서 DateTimeField 관련
모델에 DateTimeField를 적용 시켰는데 admin page에 보이질 않는다. 동영상 강의 에서는 분명히 보이는데 내가 안보이는 거라서 검색을 해봤고 stackoverflow에 다음과 같은 솔루션을 얻었다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you really want to see date in the admin panel, you can add readonly_fields in admin.py:

class RatingAdmin(admin.ModelAdmin):
    readonly_fields = ('date',)

admin.site.register(Rating,RatingAdmin)
Any field you specify will be added last after the editable fields. To control the order you can use the  fields options.

Additional information is available from the Django docs.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6386172/datetimefield-doesnt-show-in-admin-system&quot;&gt;답변링크&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;그리고 그대로 적용해 보았고, 수정할 수 없는 상태로 잘 나온다.
장고 문서에 아래와 같이 나와있어서&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As currently implemented, setting auto_now or auto_now_add to True will cause the field to have editable=False and blank=True set.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;모델 속성을 다음과 같이 바꾸고&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timestamp = models.DateTimeField(auto_now_add=True, editable=True, blank=True)
updated = models.DateTimeField(auto_now=True, editable=True, blank=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;다시 admin에 나오나 확인해 봤는데 안나온다.
auto_now_add, 와 auto_now 속성값이 editable과 blank를 True 설정되게 강제하는 것 같다.
혹시 몰라서 모든 속성값을 지우고 admin에 나오나 해봤는데 나온다.&lt;/p&gt;

        &lt;p&gt;결국 auto_now_add, 와 auto_now 속성을 적용하고 admin에서 확인하기 위해서는 stackoverflow에 나온데로 admin 모듈에서 class로 설정해주는 방법이 현재로썬 최선인 것 같다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;query set&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;장고 문서 복습 : &lt;a href=&quot;/records/2017-10-13-django_model_MakingQueries/&quot;&gt;Making queries&lt;/a&gt;, Templates(overview)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하루3분 네트워크 교실&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-24일-수요일&quot;&gt;1월 24일 수요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;장고 문서 복습 &lt;a href=&quot;/records/2017-10-13-django_model_MakingQueries/&quot;&gt;Making queries&lt;/a&gt;, 관련내용 &lt;a href=&quot;/posts/2018-01-24-Django_Spanning%20multi-valued%20relationships/&quot;&gt;posting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-25일-목요일&quot;&gt;1월 25일 목요일&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;몸이 아파서 집중도 잘 안되고 진도도 잘 안빠지는 하루였다.. 
잘 이해되지 않는 부분을 꼼꼼히 챙겨가며 진도를 나가려 하니 원하는 만큼의 분량을 뽑아내지 못하는 일이 부지기수… try django tutorial의 경우 빠르게 만들어 나가는 노력이 더 필요하다.&lt;/li&gt;
  &lt;li&gt;git hub blog의 theme를 내가 원하는 모양으로 customizing 하는데에 있어서 css 때문에 어려움을 겪었다. 패스트 캠퍼스 초창기에 공부했던 sass같은 내용들이 잘 기억이 안나고 혼선이 생겨서, 장고문서 복습 이후에 온라인에 나와있는 강의를 빠르게 한번 들어보는 것도 괜찮을 것 같다.&lt;/li&gt;
  &lt;li&gt;그렇게 css를 배워서 bootstrap을 잘 쓰고 싶다는 욕망이 생김&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;장고 문서 복습 &lt;a href=&quot;/records/2017-10-13-django_model_MakingQueries/&quot;&gt;Making queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;try django tutorial 26커밋 까지 완성&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-26일-금요일&quot;&gt;1월 26일 금요일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오늘 한일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;장고 문서 복습 &lt;a href=&quot;/records/2017-10-13-django_model_MakingQueries/&quot;&gt;Making queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;try django tutorial 35커밋 까지 완성&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">1월 22일 월요일</summary></entry><entry><title type="html">UX/UI fontsize customzing at atom editor</title><link href="https://zooozoo.github.io/posts/2018-01-17-atom/" rel="alternate" type="text/html" title="UX/UI fontsize customzing at atom editor" /><published>2018-01-17T00:00:00+09:00</published><updated>2018-01-17T00:00:00+09:00</updated><id>https://zooozoo.github.io/posts/atom</id><content type="html" xml:base="https://zooozoo.github.io/posts/2018-01-17-atom/">&lt;h3 id=&quot;아톰-에디터에서-uxui-글씨크기-바꾸기&quot;&gt;아톰 에디터에서 UX/UI 글씨크기 바꾸기&lt;/h3&gt;

&lt;p&gt;블로그 작성을 위해서 아톰 editor를 사용하는데
왼쪽 프로젝트의 파일 목록이 나오는 부분과, 파일명을 보여주는 부분의 글씨가 너무 작아서
불편함을 느끼고 있었다. 운영체제의 디스플레이 세팅을 통해서 글씨를 키워볼까 했는데
다른 부분은 모두 만족하고 사용하고 있었기 때문에 건들이기 싫었고 atom의 글씨 크기만
바꾸고 싶었다.&lt;/p&gt;

&lt;p&gt;그래서 검색!&lt;/p&gt;

&lt;p&gt;그리고 찾았다!! 아래는 해당 링크
 &lt;a href=&quot;https://github.com/atom/atom/issues/2530&quot;&gt;https://github.com/atom/atom/issues/2530&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;좀 더 자세히 설명을 남기자면 메뉴에서 settings를 찾아 들어가면
왼쪽 메뉴 맨 밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Open Config Folder&lt;/code&gt;라는 버튼이 있다. 해당 버튼을 누르면 아톰설정을
입맛에 맞게 customizing 할 수 있는 폴더 구성이 나오는데 fontsize를 바꾸기 위해서는 가장
밑에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.less&lt;/code&gt;파일을 열고 아래 코드를 붙여넣기 하면 된다.
(글씨 크기는 본인이 원하는 만큼 알아서 적용하자)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@font-size: 15px;
html, body, .tree-view, .tab-bar .tab {
  font-size: @font-size;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Seok Hun Zoo</name></author><category term="posts" /><category term="ide" /><category term="atom" /><summary type="html">아톰 에디터에서 UX/UI 글씨크기 바꾸기</summary></entry><entry><title type="html">1월15일~21일</title><link href="https://zooozoo.github.io/til/2018-01-15-1%EC%9B%9415%EC%9D%BC~21%EC%9D%BC/" rel="alternate" type="text/html" title="1월15일~21일" /><published>2018-01-15T00:00:00+09:00</published><updated>2018-01-15T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/1%EC%9B%9415%EC%9D%BC~21%EC%9D%BC</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-15-1%EC%9B%9415%EC%9D%BC~21%EC%9D%BC/">&lt;h3 id=&quot;1월-15일-월요일&quot;&gt;1월 15일 월요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;커니핸 교수의 hello digital world 공부&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-17일-수요일&quot;&gt;1월 17일 수요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;커니핸 교수의 hello digital world 공부&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-19일-금요일&quot;&gt;1월 19일 금요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;블로그 만들기
    &lt;ul&gt;
      &lt;li&gt;posts sidebar navigations에 자동으로 태그 목록 보여주도록 설정&lt;/li&gt;
      &lt;li&gt;개별 post 들어 갔을 때 sidebar가 제대로 표시되지 않았는데 header에 sidebar변수가 인식되지 않는 현상 발견
-&amp;gt; 형식에 맞는 새로운 sidebar html 파일을 만들어서 template에 적용&lt;/li&gt;
      &lt;li&gt;jekyll-archive가 git-page에서 적용되지 않는 현상 해결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1월-20일-토요일&quot;&gt;1월 20일 토요일&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;커니핸 교수의 hello digital world 공부&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">1월 15일 월요일</summary></entry><entry><title type="html">TIL 시작</title><link href="https://zooozoo.github.io/til/2018-01-14-TIL/" rel="alternate" type="text/html" title="TIL 시작" /><published>2018-01-14T00:00:00+09:00</published><updated>2018-01-14T00:00:00+09:00</updated><id>https://zooozoo.github.io/til/TIL</id><content type="html" xml:base="https://zooozoo.github.io/til/2018-01-14-TIL/">&lt;p&gt;초보몽키라는 이름의 블로그를 운영하고 계신 이현주님의 블로그를 보면 Today I Learned 라는 카테고리로 포스팅을 해놓았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wayhome25.github.io/&quot;&gt;&amp;gt; 블로그 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그것을 보는 순간!&lt;/p&gt;

&lt;p&gt;‘오~!!!!! 괜찮은 방법이다.’ 싶었습니다.&lt;/p&gt;

&lt;p&gt;그래서 저도 하루하루 제가 했던 일들에 대하여, 혹은 공부한 것 들에 대하여 기록하려고 합니다.&lt;/p&gt;

&lt;p&gt;사실 이렇게 누군가에게 알리고 싶지도 않고, 매일매일 공부하려는 다짐에 자신감도 조금 부족하지만&lt;/p&gt;

&lt;p&gt;이렇게 포스팅 하는 것 자체가 동기부여가 될 것 같아 시작하기로 다짐했습니다.&lt;/p&gt;

&lt;p&gt;처음 시작하다보니 무슨내용을 어떻게 얼마나 상세하게 적어나가야 할지… 잘 떠오르지 않았지만&lt;/p&gt;

&lt;p&gt;나중에 적는 방식이 바뀐다 하더라도 일단은 적어나가려고 합니다.&lt;/p&gt;

&lt;p&gt;이전에 학원에서 같이 하게된 프로젝트에서도 매일매일 이슈사항과 내가 한 일들 그리고 해야 할 것들을 적어 나갔는데&lt;/p&gt;

&lt;p&gt;그렇게 하던 방법대로 해 나가면 될 것 같습니다.&lt;/p&gt;

&lt;p&gt;오늘도 잠깐 다른 개발자들의 블로그를 보면서 경외심과 ‘대단하다’라는 생각과 ‘나도 더 열심히 해야지!’ 라는 마음이&lt;/p&gt;

&lt;p&gt;겹쳐집니다.&lt;/p&gt;

&lt;p&gt;누군가에겐 영감을 주고 스스로에겐 동기부여를 만드는 TIL 게시판이 되었으면 좋겠습니다.&lt;/p&gt;

&lt;p&gt;-TIL을 시작하며-&lt;/p&gt;</content><author><name>Seok Hun Zoo</name></author><category term="til" /><summary type="html">초보몽키라는 이름의 블로그를 운영하고 계신 이현주님의 블로그를 보면 Today I Learned 라는 카테고리로 포스팅을 해놓았습니다.</summary></entry><entry><title type="html">Docker관련</title><link href="https://zooozoo.github.io/records/2017-11-16-docker%EA%B4%80%EB%A0%A8/" rel="alternate" type="text/html" title="Docker관련" /><published>2017-11-16T00:00:00+09:00</published><updated>2017-11-16T00:00:00+09:00</updated><id>https://zooozoo.github.io/records/docker%EA%B4%80%EB%A0%A8</id><content type="html" xml:base="https://zooozoo.github.io/records/2017-11-16-docker%EA%B4%80%EB%A0%A8/">&lt;h1 id=&quot;docker-세팅&quot;&gt;Docker 세팅&lt;/h1&gt;

&lt;p&gt;도커를 처음 설치하고 나서 다음 명령어로 우분투 이미지를 다운받고 해당 운영체제를 실행할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run ubuntu:16.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm it ubuntu:16:04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;켜진 도커환경 안에서는 처음부터 root권한이 주어지기 때문에 sudo입력 없이도 여러가지 설치 명령을 실행시킬 수 있다.&lt;/p&gt;

&lt;p&gt;Dockerfile.base 이미지 만드는 명령어&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker build -t base -f Dockerfile.base .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dockerfile.base를 기준으로 우리가 쓸 도커(container) 만드는 명령어&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker build -t eb .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만든 이미지 확인 명령어&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker(Container) 실행시키는 명령어(예: eb)&lt;/p&gt;

&lt;p&gt;(마지막의 &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt;옵션으로 프로그램을 실행시키기 위해 입력해주는 것, &lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt;터미널 형식으로 연다는 뜻, &lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;옵션은 컨테이너가 꺼졌을 때 삭제한다는 의미)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run --rm -it eb /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker를 외부랑 연결시키기 위해서 옵션을 추가한 멸영어&lt;/p&gt;

&lt;p&gt;(우리가 8012로 접근하면 docker는 80으로 받는다. 우리가 8013으로 접근하면 docker는  8000으로 받는다. 80번 포트와 8000포트를 둘다 테스트해보고 싶을 때 이런식으로 쓴다)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run --rm -it -p 8012:80 -p 8013:8000 eb /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;켜져있는 도커에 접속할 수 있는 명령어 (4317은 docker id)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it 4317 /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와같은 명령어를 아래와 같이 접속도 가능하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it 4317 zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행되고 있는 이미지 파일(container) 정보 확인하는 명령어&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Seok Hun Zoo</name></author><category term="records" /><summary type="html">Docker 세팅</summary></entry></feed>